{"version":3,"sources":["usePanGesture.ts"],"names":["useMemo","Gesture","useSharedValue","usePanGesture","holdDuration","x","y","isPanGestureActive","panGesture","Pan","activateAfterLongPress","onChange","e","value","onStart","onEnd","gesture","isActive"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,OAAT,QAAoC,8BAApC;AACA,SAAqBC,cAArB,QAA2C,yBAA3C;AAaA,OAAO,SAASC,aAAT,OAA+D;AAAA,MAAxC;AAAEC,IAAAA,YAAY,GAAG;AAAjB,GAAwC;AACpE,QAAMC,CAAC,GAAGH,cAAc,CAAC,CAAD,CAAxB;AACA,QAAMI,CAAC,GAAGJ,cAAc,CAAC,CAAD,CAAxB;AACA,QAAMK,kBAAkB,GAAGL,cAAc,CAAC,KAAD,CAAzC;AAEA,QAAMM,UAAU,GAAGR,OAAO,CACxB,MACEC,OAAO,CAACQ,GAAR,GACGC,sBADH,CAC0BN,YAD1B,EAEGO,QAFH,CAEaC,CAAD,IAAO;AACfP,IAAAA,CAAC,CAACQ,KAAF,GAAUD,CAAC,CAACP,CAAZ;AACAC,IAAAA,CAAC,CAACO,KAAF,GAAUD,CAAC,CAACN,CAAZ;AACD,GALH,EAMGQ,OANH,CAMW,MAAM;AACbP,IAAAA,kBAAkB,CAACM,KAAnB,GAA2B,IAA3B;AACD,GARH,EASGE,KATH,CASS,MAAM;AACXR,IAAAA,kBAAkB,CAACM,KAAnB,GAA2B,KAA3B;AACD,GAXH,CAFsB,EAcxB,CAACT,YAAD,EAAeG,kBAAf,EAAmCF,CAAnC,EAAsCC,CAAtC,CAdwB,CAA1B;AAiBA,SAAON,OAAO,CACZ,OAAO;AACLgB,IAAAA,OAAO,EAAER,UADJ;AAELS,IAAAA,QAAQ,EAAEV,kBAFL;AAGLF,IAAAA,CAAC,EAAEA,CAHE;AAILC,IAAAA,CAAC,EAAEA;AAJE,GAAP,CADY,EAOZ,CAACC,kBAAD,EAAqBC,UAArB,EAAiCH,CAAjC,EAAoCC,CAApC,CAPY,CAAd;AASD","sourcesContent":["import { useMemo } from 'react'\nimport { Gesture, PanGesture } from 'react-native-gesture-handler'\nimport Reanimated, { useSharedValue } from 'react-native-reanimated'\n\ninterface Config {\n  holdDuration: number\n}\n\ninterface Result {\n  x: Reanimated.SharedValue<number>\n  y: Reanimated.SharedValue<number>\n  isActive: Reanimated.SharedValue<boolean>\n  gesture: PanGesture\n}\n\nexport function usePanGesture({ holdDuration = 300 }: Config): Result {\n  const x = useSharedValue(0)\n  const y = useSharedValue(0)\n  const isPanGestureActive = useSharedValue(false)\n\n  const panGesture = useMemo(\n    () =>\n      Gesture.Pan()\n        .activateAfterLongPress(holdDuration)\n        .onChange((e) => {\n          x.value = e.x\n          y.value = e.y\n        })\n        .onStart(() => {\n          isPanGestureActive.value = true\n        })\n        .onEnd(() => {\n          isPanGestureActive.value = false\n        }),\n    [holdDuration, isPanGestureActive, x, y]\n  )\n\n  return useMemo(\n    () => ({\n      gesture: panGesture,\n      isActive: isPanGestureActive,\n      x: x,\n      y: y,\n    }),\n    [isPanGestureActive, panGesture, x, y]\n  )\n}\n"]}