{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useRef } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { pastData } from \"../style/style.js\";\nimport BloodSugarGraph from \"./BloodSugarGraph.js\";\nimport BloodPressureGraph from \"./BloodPressureGraph.js\";\nimport SproutSVG from \"../assets/SproutSVG.js\";\nimport { AceData, GulData, FoodData, BloodData, AceData1 } from \"./Data.js\";\nimport { useFocusEffect } from '@react-navigation/native';\nimport { currUserName } from \"./Login.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default (function () {\n  var vw = Dimensions.get(\"window\").width;\n  var scrollOffsetY = useRef(new Animated.Value(0)).current;\n  var maxHeaderHeight = vw * .5;\n  var minHeaderHeight = vw * .15;\n  var scrollDistance = maxHeaderHeight - minHeaderHeight;\n  var BloodPressureData = BloodData[0];\n  var animatedHeaderHeight = scrollOffsetY.interpolate({\n    inputRange: [0, scrollDistance],\n    outputRange: [maxHeaderHeight, minHeaderHeight],\n    extrapolate: \"clamp\"\n  });\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      reload = _useState2[0],\n      setReload = _useState2[1];\n\n  useFocusEffect(React.useCallback(function () {\n    var unsub = function unsub() {\n      setReload(!reload);\n    };\n\n    return function () {\n      return unsub();\n    };\n  }));\n  var mainElements = [{\n    title: \"day\",\n    graph: _jsx(BloodSugarGraph, {\n      width: vw * .6,\n      data: AceData,\n      title: \"Past Day (Breathanalzyer)\",\n      unit: \"ppm\",\n      label: true\n    })\n  }, {\n    title: \"week\",\n    graph: _jsx(BloodSugarGraph, {\n      width: vw * .6,\n      data: AceData1,\n      title: \"Past Week (Breathanalyzer)\",\n      unit: \"ppm\",\n      label: true\n    })\n  }];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      mainActive = _useState4[0],\n      setMainActive = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      ref = _useState6[0],\n      setref = _useState6[1];\n\n  var onchange = function onchange(nativeEvent) {\n    if (nativeEvent) {\n      var slide = Math.ceil(nativeEvent.contentOffset.x / nativeEvent.layoutMeasurement.width);\n\n      if (slide != mainActive) {\n        setMainActive(slide);\n      }\n    }\n  };\n\n  var selectGraph = function selectGraph(i) {\n    setMainActive(i);\n    ref.scrollTo({\n      x: vw * i,\n      y: 0,\n      animated: true\n    });\n  };\n\n  return _jsxs(View, {\n    rel: reload,\n    style: pastData.container,\n    children: [_jsxs(Animated.View, {\n      style: [pastData.profile, {\n        height: animatedHeaderHeight\n      }],\n      children: [_jsx(SproutSVG, {}), _jsx(Text, {\n        style: pastData.name,\n        children: currUserName\n      })]\n    }), _jsxs(ScrollView, {\n      style: pastData.content,\n      scrollEventThrottle: 16,\n      onScroll: Animated.event([{\n        nativeEvent: {\n          contentOffset: {\n            y: scrollOffsetY\n          }\n        }\n      }], {\n        useNativeDriver: false\n      }),\n      children: [_jsx(View, {\n        style: pastData.labelContainer,\n        children: mainElements.map(function (i, index) {\n          return _jsx(TouchableOpacity, {\n            style: [mainActive == index ? pastData.labelActive : pastData.label, pastData.labelStyle],\n            onPress: function onPress() {\n              return selectGraph(index);\n            },\n            children: _jsx(Text, {\n              style: pastData.labelText,\n              children: i.title\n            })\n          }, \"label\" + index);\n        })\n      }), _jsx(View, {\n        style: pastData.mainContainer,\n        children: _jsx(ScrollView, {\n          ref: function ref(_ref2) {\n            setref(_ref2);\n          },\n          style: pastData.main,\n          onScroll: function onScroll(_ref) {\n            var nativeEvent = _ref.nativeEvent;\n            return onchange(nativeEvent);\n          },\n          horizontal: true,\n          showsHorizontalScrollIndicator: false,\n          scrollEventThrottle: 500,\n          pagingEnabled: true,\n          children: mainElements.map(function (i, index) {\n            return _jsx(View, {\n              style: pastData.mainContent,\n              children: i.graph\n            }, index);\n          })\n        })\n      }), _jsxs(View, {\n        style: pastData.wrapper,\n        children: [_jsx(View, {\n          style: pastData.content1,\n          children: _jsx(BloodSugarGraph, {\n            width: vw * .4,\n            data: GulData,\n            title: \"Glucometer\",\n            label: false\n          })\n        }), _jsx(View, {\n          style: pastData.content2,\n          children: _jsx(BloodPressureGraph, {\n            width: vw,\n            data: {\n              systolic: BloodPressureData.systolic,\n              diastolic: BloodPressureData.diastolic\n            }\n          })\n        })]\n      }), _jsx(View, {\n        style: pastData.wrapper,\n        children: _jsx(View, {\n          style: pastData.content3,\n          children: _jsx(BloodSugarGraph, {\n            width: vw * .65,\n            data: FoodData,\n            title: \"Sugar Intaked\",\n            unit: \"grams\",\n            label: true\n          })\n        })\n      }), _jsx(View, {\n        style: pastData.spacer\n      })]\n    })]\n  });\n});","map":{"version":3,"names":["React","useState","useRef","pastData","BloodSugarGraph","BloodPressureGraph","SproutSVG","AceData","GulData","FoodData","BloodData","AceData1","useFocusEffect","currUserName","vw","Dimensions","get","width","scrollOffsetY","Animated","Value","current","maxHeaderHeight","minHeaderHeight","scrollDistance","BloodPressureData","animatedHeaderHeight","interpolate","inputRange","outputRange","extrapolate","reload","setReload","useCallback","unsub","mainElements","title","graph","mainActive","setMainActive","ref","setref","onchange","nativeEvent","slide","Math","ceil","contentOffset","x","layoutMeasurement","selectGraph","i","scrollTo","y","animated","container","profile","height","name","content","event","useNativeDriver","labelContainer","map","index","labelActive","label","labelStyle","labelText","mainContainer","main","mainContent","wrapper","content1","content2","systolic","diastolic","content3","spacer"],"sources":["C:/Users/thund/OneDrive/Documents/HTML/breathanaylzer/components/PastData.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport { Text, View, ScrollView, Dimensions, Animated, TouchableOpacity } from 'react-native';\r\nimport { pastData } from '../style/style.js';\r\nimport BloodSugarGraph from './BloodSugarGraph.js';\r\nimport BloodPressureGraph from './BloodPressureGraph.js';\r\nimport SproutSVG from '../assets/SproutSVG.js';\r\nimport { AceData, GulData, FoodData, BloodData, AceData1 } from './Data.js';\r\nimport { useFocusEffect } from '@react-navigation/native';\r\nimport { currUserName } from './Login.js';\r\n\r\nexport default () => {\r\n\r\n  const vw = Dimensions.get(\"window\").width;\r\n\r\n  const scrollOffsetY = useRef(new Animated.Value(0)).current;\r\n  const maxHeaderHeight = vw * .5;\r\n  const minHeaderHeight = vw * .15;\r\n  const scrollDistance = maxHeaderHeight - minHeaderHeight;\r\n\r\n  const BloodPressureData = BloodData[0];\r\n\r\n  const animatedHeaderHeight = scrollOffsetY.interpolate({\r\n    inputRange: [0, scrollDistance],\r\n    outputRange: [maxHeaderHeight, minHeaderHeight],\r\n    extrapolate: \"clamp\",\r\n  })\r\n\r\n  const [reload, setReload] = useState(false);\r\n\r\n  useFocusEffect(\r\n    React.useCallback(() => {\r\n      const unsub = () => {\r\n        setReload(!reload);\r\n      }\r\n      return () => unsub();\r\n    },)\r\n  )\r\n\r\n  const mainElements = [\r\n    { title: \"day\", graph: <BloodSugarGraph width={vw * .6} data={AceData} title=\"Past Day (Breathanalzyer)\" unit=\"ppm\" label={true} /> },\r\n    { title: \"week\", graph: <BloodSugarGraph width={vw * .6} data={AceData1} title=\"Past Week (Breathanalyzer)\" unit=\"ppm\" label={true} /> },\r\n  ];\r\n\r\n  const [mainActive, setMainActive] = useState(0);\r\n  const [ref, setref] = useState(null);\r\n\r\n  const onchange = (nativeEvent) => {\r\n    if (nativeEvent) {\r\n      const slide = Math.ceil(nativeEvent.contentOffset.x / nativeEvent.layoutMeasurement.width);\r\n      if (slide != mainActive) {\r\n        setMainActive(slide)\r\n      }\r\n    }\r\n  }\r\n\r\n  const selectGraph = (i) => {\r\n    setMainActive(i);\r\n    ref.scrollTo({\r\n      x: vw * i,\r\n      y: 0,\r\n      animated: true\r\n    })\r\n  }\r\n\r\n  return (\r\n    <View rel={reload} style={pastData.container}>\r\n      <Animated.View\r\n        style={[pastData.profile,\r\n        { height: animatedHeaderHeight }\r\n        ]}>\r\n        <SproutSVG />\r\n        <Text style={pastData.name}>{currUserName}</Text>\r\n      </Animated.View>\r\n      <ScrollView\r\n        style={pastData.content}\r\n        scrollEventThrottle={16}\r\n        onScroll={Animated.event(\r\n          [{ nativeEvent: { contentOffset: { y: scrollOffsetY } } }],\r\n          { useNativeDriver: false }\r\n        )}\r\n      >\r\n        <View style={pastData.labelContainer}>\r\n          {\r\n            mainElements.map((i, index) =>\r\n              <TouchableOpacity\r\n                style={[mainActive == index ? pastData.labelActive : pastData.label, pastData.labelStyle]}\r\n                key={\"label\" + index}\r\n                onPress={() => selectGraph(index)}\r\n              >\r\n                <Text style={pastData.labelText}>\r\n                  {i.title}\r\n                </Text>\r\n              </TouchableOpacity>\r\n            )\r\n          }\r\n        </View>\r\n        <View style={pastData.mainContainer}>\r\n          <ScrollView\r\n            ref={(ref) => {\r\n              setref(ref);\r\n            }}\r\n            style={pastData.main}\r\n            onScroll={({ nativeEvent }) => onchange(nativeEvent)}\r\n            horizontal\r\n            showsHorizontalScrollIndicator={false}\r\n            scrollEventThrottle={500}\r\n            pagingEnabled\r\n          >\r\n            {\r\n              mainElements.map((i, index) =>\r\n                <View style={pastData.mainContent} key={index}>\r\n                  {i.graph}\r\n                </View>\r\n              )\r\n            }\r\n          </ScrollView>\r\n        </View>\r\n        <View style={pastData.wrapper}>\r\n          <View style={pastData.content1}>\r\n            <BloodSugarGraph width={vw * .4} data={GulData} title={\"Glucometer\"} label={false} />\r\n          </View>\r\n          <View style={pastData.content2}>\r\n            <BloodPressureGraph width={vw} data={{ systolic: BloodPressureData.systolic, diastolic: BloodPressureData.diastolic }} />\r\n          </View>\r\n        </View>\r\n        <View style={pastData.wrapper}>\r\n          <View style={pastData.content3}>\r\n            <BloodSugarGraph width={vw * .65} data={FoodData} title={\"Sugar Intaked\"} unit=\"grams\" label={true} />\r\n          </View>\r\n        </View>\r\n        <View style={pastData.spacer} />\r\n      </ScrollView>\r\n    </View>\r\n  );\r\n}"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;;;;;;;AAEA,SAASC,QAAT;AACA,OAAOC,eAAP;AACA,OAAOC,kBAAP;AACA,OAAOC,SAAP;AACA,SAASC,OAAT,EAAkBC,OAAlB,EAA2BC,QAA3B,EAAqCC,SAArC,EAAgDC,QAAhD;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,YAAT;;;AAEA,gBAAe,YAAM;EAEnB,IAAMC,EAAE,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC,KAApC;EAEA,IAAMC,aAAa,GAAGhB,MAAM,CAAC,IAAIiB,QAAQ,CAACC,KAAb,CAAmB,CAAnB,CAAD,CAAN,CAA8BC,OAApD;EACA,IAAMC,eAAe,GAAGR,EAAE,GAAG,EAA7B;EACA,IAAMS,eAAe,GAAGT,EAAE,GAAG,GAA7B;EACA,IAAMU,cAAc,GAAGF,eAAe,GAAGC,eAAzC;EAEA,IAAME,iBAAiB,GAAGf,SAAS,CAAC,CAAD,CAAnC;EAEA,IAAMgB,oBAAoB,GAAGR,aAAa,CAACS,WAAd,CAA0B;IACrDC,UAAU,EAAE,CAAC,CAAD,EAAIJ,cAAJ,CADyC;IAErDK,WAAW,EAAE,CAACP,eAAD,EAAkBC,eAAlB,CAFwC;IAGrDO,WAAW,EAAE;EAHwC,CAA1B,CAA7B;;EAMA,gBAA4B7B,QAAQ,CAAC,KAAD,CAApC;EAAA;EAAA,IAAO8B,MAAP;EAAA,IAAeC,SAAf;;EAEApB,cAAc,CACZZ,KAAK,CAACiC,WAAN,CAAkB,YAAM;IACtB,IAAMC,KAAK,GAAG,SAARA,KAAQ,GAAM;MAClBF,SAAS,CAAC,CAACD,MAAF,CAAT;IACD,CAFD;;IAGA,OAAO;MAAA,OAAMG,KAAK,EAAX;IAAA,CAAP;EACD,CALD,CADY,CAAd;EASA,IAAMC,YAAY,GAAG,CACnB;IAAEC,KAAK,EAAE,KAAT;IAAgBC,KAAK,EAAE,KAAC,eAAD;MAAiB,KAAK,EAAEvB,EAAE,GAAG,EAA7B;MAAiC,IAAI,EAAEP,OAAvC;MAAgD,KAAK,EAAC,2BAAtD;MAAkF,IAAI,EAAC,KAAvF;MAA6F,KAAK,EAAE;IAApG;EAAvB,CADmB,EAEnB;IAAE6B,KAAK,EAAE,MAAT;IAAiBC,KAAK,EAAE,KAAC,eAAD;MAAiB,KAAK,EAAEvB,EAAE,GAAG,EAA7B;MAAiC,IAAI,EAAEH,QAAvC;MAAiD,KAAK,EAAC,4BAAvD;MAAoF,IAAI,EAAC,KAAzF;MAA+F,KAAK,EAAE;IAAtG;EAAxB,CAFmB,CAArB;;EAKA,iBAAoCV,QAAQ,CAAC,CAAD,CAA5C;EAAA;EAAA,IAAOqC,UAAP;EAAA,IAAmBC,aAAnB;;EACA,iBAAsBtC,QAAQ,CAAC,IAAD,CAA9B;EAAA;EAAA,IAAOuC,GAAP;EAAA,IAAYC,MAAZ;;EAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,WAAD,EAAiB;IAChC,IAAIA,WAAJ,EAAiB;MACf,IAAMC,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUH,WAAW,CAACI,aAAZ,CAA0BC,CAA1B,GAA8BL,WAAW,CAACM,iBAAZ,CAA8BhC,KAAtE,CAAd;;MACA,IAAI2B,KAAK,IAAIN,UAAb,EAAyB;QACvBC,aAAa,CAACK,KAAD,CAAb;MACD;IACF;EACF,CAPD;;EASA,IAAMM,WAAW,GAAG,SAAdA,WAAc,CAACC,CAAD,EAAO;IACzBZ,aAAa,CAACY,CAAD,CAAb;IACAX,GAAG,CAACY,QAAJ,CAAa;MACXJ,CAAC,EAAElC,EAAE,GAAGqC,CADG;MAEXE,CAAC,EAAE,CAFQ;MAGXC,QAAQ,EAAE;IAHC,CAAb;EAKD,CAPD;;EASA,OACE,MAAC,IAAD;IAAM,GAAG,EAAEvB,MAAX;IAAmB,KAAK,EAAE5B,QAAQ,CAACoD,SAAnC;IAAA,WACE,MAAC,QAAD,CAAU,IAAV;MACE,KAAK,EAAE,CAACpD,QAAQ,CAACqD,OAAV,EACP;QAAEC,MAAM,EAAE/B;MAAV,CADO,CADT;MAAA,WAIE,KAAC,SAAD,KAJF,EAKE,KAAC,IAAD;QAAM,KAAK,EAAEvB,QAAQ,CAACuD,IAAtB;QAAA,UAA6B7C;MAA7B,EALF;IAAA,EADF,EAQE,MAAC,UAAD;MACE,KAAK,EAAEV,QAAQ,CAACwD,OADlB;MAEE,mBAAmB,EAAE,EAFvB;MAGE,QAAQ,EAAExC,QAAQ,CAACyC,KAAT,CACR,CAAC;QAAEjB,WAAW,EAAE;UAAEI,aAAa,EAAE;YAAEM,CAAC,EAAEnC;UAAL;QAAjB;MAAf,CAAD,CADQ,EAER;QAAE2C,eAAe,EAAE;MAAnB,CAFQ,CAHZ;MAAA,WAQE,KAAC,IAAD;QAAM,KAAK,EAAE1D,QAAQ,CAAC2D,cAAtB;QAAA,UAEI3B,YAAY,CAAC4B,GAAb,CAAiB,UAACZ,CAAD,EAAIa,KAAJ;UAAA,OACf,KAAC,gBAAD;YACE,KAAK,EAAE,CAAC1B,UAAU,IAAI0B,KAAd,GAAsB7D,QAAQ,CAAC8D,WAA/B,GAA6C9D,QAAQ,CAAC+D,KAAvD,EAA8D/D,QAAQ,CAACgE,UAAvE,CADT;YAGE,OAAO,EAAE;cAAA,OAAMjB,WAAW,CAACc,KAAD,CAAjB;YAAA,CAHX;YAAA,UAKE,KAAC,IAAD;cAAM,KAAK,EAAE7D,QAAQ,CAACiE,SAAtB;cAAA,UACGjB,CAAC,CAACf;YADL;UALF,GAEO,UAAU4B,KAFjB,CADe;QAAA,CAAjB;MAFJ,EARF,EAuBE,KAAC,IAAD;QAAM,KAAK,EAAE7D,QAAQ,CAACkE,aAAtB;QAAA,UACE,KAAC,UAAD;UACE,GAAG,EAAE,aAAC7B,KAAD,EAAS;YACZC,MAAM,CAACD,KAAD,CAAN;UACD,CAHH;UAIE,KAAK,EAAErC,QAAQ,CAACmE,IAJlB;UAKE,QAAQ,EAAE;YAAA,IAAG3B,WAAH,QAAGA,WAAH;YAAA,OAAqBD,QAAQ,CAACC,WAAD,CAA7B;UAAA,CALZ;UAME,UAAU,MANZ;UAOE,8BAA8B,EAAE,KAPlC;UAQE,mBAAmB,EAAE,GARvB;UASE,aAAa,MATf;UAAA,UAYIR,YAAY,CAAC4B,GAAb,CAAiB,UAACZ,CAAD,EAAIa,KAAJ;YAAA,OACf,KAAC,IAAD;cAAM,KAAK,EAAE7D,QAAQ,CAACoE,WAAtB;cAAA,UACGpB,CAAC,CAACd;YADL,GAAwC2B,KAAxC,CADe;UAAA,CAAjB;QAZJ;MADF,EAvBF,EA4CE,MAAC,IAAD;QAAM,KAAK,EAAE7D,QAAQ,CAACqE,OAAtB;QAAA,WACE,KAAC,IAAD;UAAM,KAAK,EAAErE,QAAQ,CAACsE,QAAtB;UAAA,UACE,KAAC,eAAD;YAAiB,KAAK,EAAE3D,EAAE,GAAG,EAA7B;YAAiC,IAAI,EAAEN,OAAvC;YAAgD,KAAK,EAAE,YAAvD;YAAqE,KAAK,EAAE;UAA5E;QADF,EADF,EAIE,KAAC,IAAD;UAAM,KAAK,EAAEL,QAAQ,CAACuE,QAAtB;UAAA,UACE,KAAC,kBAAD;YAAoB,KAAK,EAAE5D,EAA3B;YAA+B,IAAI,EAAE;cAAE6D,QAAQ,EAAElD,iBAAiB,CAACkD,QAA9B;cAAwCC,SAAS,EAAEnD,iBAAiB,CAACmD;YAArE;UAArC;QADF,EAJF;MAAA,EA5CF,EAoDE,KAAC,IAAD;QAAM,KAAK,EAAEzE,QAAQ,CAACqE,OAAtB;QAAA,UACE,KAAC,IAAD;UAAM,KAAK,EAAErE,QAAQ,CAAC0E,QAAtB;UAAA,UACE,KAAC,eAAD;YAAiB,KAAK,EAAE/D,EAAE,GAAG,GAA7B;YAAkC,IAAI,EAAEL,QAAxC;YAAkD,KAAK,EAAE,eAAzD;YAA0E,IAAI,EAAC,OAA/E;YAAuF,KAAK,EAAE;UAA9F;QADF;MADF,EApDF,EAyDE,KAAC,IAAD;QAAM,KAAK,EAAEN,QAAQ,CAAC2E;MAAtB,EAzDF;IAAA,EARF;EAAA,EADF;AAsED,CA5HD"},"metadata":{},"sourceType":"module"}