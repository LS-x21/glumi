{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { isString } from '@react-native-firebase/app/lib/common';\nimport NativeError from '@react-native-firebase/app/lib/internal/NativeFirebaseError';\nimport SharedEventEmitter from '@react-native-firebase/app/lib/internal/SharedEventEmitter';\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport DatabaseDataSnapshot from \"./DatabaseDataSnapshot\";\n\nvar DatabaseSyncTree = function () {\n  function DatabaseSyncTree() {\n    _classCallCheck(this, DatabaseSyncTree);\n\n    this._tree = {};\n    this._reverseLookup = {};\n    SharedEventEmitter.addListener('database_sync_event', this._handleSyncEvent.bind(this));\n  }\n\n  _createClass(DatabaseSyncTree, [{\n    key: \"native\",\n    get: function get() {\n      return NativeModules.RNFBDatabaseQueryModule;\n    }\n  }, {\n    key: \"_handleSyncEvent\",\n    value: function _handleSyncEvent(event) {\n      var body = event.body;\n\n      if (body.error) {\n        this._handleErrorEvent(body);\n      } else {\n        this._handleValueEvent(body);\n      }\n    }\n  }, {\n    key: \"_handleErrorEvent\",\n    value: function _handleErrorEvent(event) {\n      var _event$registration = event.registration,\n          eventRegistrationKey = _event$registration.eventRegistrationKey,\n          registrationCancellationKey = _event$registration.registrationCancellationKey;\n      var registration = this.getRegistration(registrationCancellationKey);\n\n      if (registration) {\n        var error = NativeError.fromEvent(event.error, 'database');\n        SharedEventEmitter.emit(registrationCancellationKey, error);\n        this.removeRegistration(eventRegistrationKey);\n      }\n    }\n  }, {\n    key: \"_handleValueEvent\",\n    value: function _handleValueEvent(event) {\n      var _event$registration2 = event.registration,\n          key = _event$registration2.key,\n          eventRegistrationKey = _event$registration2.eventRegistrationKey;\n      var registration = this.getRegistration(eventRegistrationKey);\n\n      if (!registration) {\n        return this.native.off(key, eventRegistrationKey);\n      }\n\n      var snapshot;\n      var previousChildName;\n\n      if (event.eventType === 'value') {\n        snapshot = new DatabaseDataSnapshot(registration.ref, event.data);\n      } else {\n        snapshot = new DatabaseDataSnapshot(registration.ref, event.data.snapshot);\n        previousChildName = event.data.previousChildName;\n      }\n\n      return SharedEventEmitter.emit(eventRegistrationKey, snapshot, previousChildName);\n    }\n  }, {\n    key: \"getRegistration\",\n    value: function getRegistration(registration) {\n      return this._reverseLookup[registration] ? _extends({}, this._reverseLookup[registration]) : null;\n    }\n  }, {\n    key: \"removeListenersForRegistrations\",\n    value: function removeListenersForRegistrations(registrations) {\n      if (isString(registrations)) {\n        this.removeRegistration(registrations);\n        SharedEventEmitter.removeAllListeners(registrations);\n        return 1;\n      }\n\n      if (!Array.isArray(registrations)) {\n        return 0;\n      }\n\n      for (var i = 0, len = registrations.length; i < len; i++) {\n        this.removeRegistration(registrations[i]);\n        SharedEventEmitter.removeAllListeners(registrations[i]);\n      }\n\n      return registrations.length;\n    }\n  }, {\n    key: \"removeListenerRegistrations\",\n    value: function removeListenerRegistrations(listener, registrations) {\n      if (!Array.isArray(registrations)) {\n        return [];\n      }\n\n      var removed = [];\n\n      for (var i = 0, len = registrations.length; i < len; i++) {\n        var registration = registrations[i];\n        var subscriptions = void 0;\n\n        if (SharedEventEmitter._subscriber) {\n          subscriptions = SharedEventEmitter._subscriber.getSubscriptionsForType(registration);\n        } else {\n          var registrySubscriptionsSet = SharedEventEmitter._registry[registration];\n\n          if (registrySubscriptionsSet) {\n            subscriptions = Array.from(registrySubscriptionsSet);\n          }\n        }\n\n        if (subscriptions) {\n          for (var j = 0, l = subscriptions.length; j < l; j++) {\n            var subscription = subscriptions[j];\n\n            if (subscription && subscription.listener === listener) {\n              subscription.remove();\n              removed.push(registration);\n              this.removeRegistration(registration);\n            }\n          }\n        }\n      }\n\n      return removed;\n    }\n  }, {\n    key: \"getRegistrationsByPath\",\n    value: function getRegistrationsByPath(path) {\n      var out = [];\n      var eventKeys = Object.keys(this._tree[path] || {});\n\n      for (var i = 0, len = eventKeys.length; i < len; i++) {\n        Array.prototype.push.apply(out, Object.keys(this._tree[path][eventKeys[i]]));\n      }\n\n      return out;\n    }\n  }, {\n    key: \"getRegistrationsByPathEvent\",\n    value: function getRegistrationsByPathEvent(path, eventType) {\n      if (!this._tree[path]) {\n        return [];\n      }\n\n      if (!this._tree[path][eventType]) {\n        return [];\n      }\n\n      return Object.keys(this._tree[path][eventType]);\n    }\n  }, {\n    key: \"getOneByPathEventListener\",\n    value: function getOneByPathEventListener(path, eventType, listener) {\n      if (!this._tree[path]) {\n        return null;\n      }\n\n      if (!this._tree[path][eventType]) {\n        return null;\n      }\n\n      var registrationsForPathEvent = Object.entries(this._tree[path][eventType]);\n\n      for (var i = 0; i < registrationsForPathEvent.length; i++) {\n        var registration = registrationsForPathEvent[i];\n\n        if (registration[1] === listener) {\n          return registration[0];\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"addRegistration\",\n    value: function addRegistration(registration) {\n      var _this = this;\n\n      var eventRegistrationKey = registration.eventRegistrationKey,\n          eventType = registration.eventType,\n          listener = registration.listener,\n          once = registration.once,\n          path = registration.path;\n\n      if (!this._tree[path]) {\n        this._tree[path] = {};\n      }\n\n      if (!this._tree[path][eventType]) {\n        this._tree[path][eventType] = {};\n      }\n\n      this._tree[path][eventType][eventRegistrationKey] = listener;\n      this._reverseLookup[eventRegistrationKey] = registration;\n\n      if (once) {\n        var subscription = SharedEventEmitter.addListener(eventRegistrationKey, function (event) {\n          _this._onOnceRemoveRegistration(eventRegistrationKey, listener)(event);\n\n          subscription.remove();\n        });\n      } else {\n        SharedEventEmitter.addListener(eventRegistrationKey, listener);\n      }\n\n      return eventRegistrationKey;\n    }\n  }, {\n    key: \"removeRegistration\",\n    value: function removeRegistration(registration) {\n      if (!this._reverseLookup[registration]) {\n        return false;\n      }\n\n      var _this$_reverseLookup$ = this._reverseLookup[registration],\n          path = _this$_reverseLookup$.path,\n          eventType = _this$_reverseLookup$.eventType,\n          once = _this$_reverseLookup$.once;\n\n      if (!this._tree[path]) {\n        delete this._reverseLookup[registration];\n        return false;\n      }\n\n      if (!this._tree[path][eventType]) {\n        delete this._reverseLookup[registration];\n        return false;\n      }\n\n      var registrationObj = this._reverseLookup[registration];\n\n      if (registrationObj && !once) {\n        this.native.off(registrationObj.key, registration);\n      }\n\n      delete this._tree[path][eventType][registration];\n      delete this._reverseLookup[registration];\n      return !!registrationObj;\n    }\n  }, {\n    key: \"_onOnceRemoveRegistration\",\n    value: function _onOnceRemoveRegistration(registration, listener) {\n      var _this2 = this;\n\n      return function () {\n        _this2.removeRegistration(registration);\n\n        listener.apply(void 0, arguments);\n      };\n    }\n  }]);\n\n  return DatabaseSyncTree;\n}();\n\nexport default new DatabaseSyncTree();","map":{"version":3,"names":["isString","NativeError","SharedEventEmitter","DatabaseDataSnapshot","DatabaseSyncTree","_tree","_reverseLookup","addListener","_handleSyncEvent","bind","NativeModules","RNFBDatabaseQueryModule","event","body","error","_handleErrorEvent","_handleValueEvent","registration","eventRegistrationKey","registrationCancellationKey","getRegistration","fromEvent","emit","removeRegistration","key","native","off","snapshot","previousChildName","eventType","ref","data","registrations","removeAllListeners","Array","isArray","i","len","length","listener","removed","subscriptions","_subscriber","getSubscriptionsForType","registrySubscriptionsSet","_registry","from","j","l","subscription","remove","push","path","out","eventKeys","Object","keys","prototype","apply","registrationsForPathEvent","entries","once","_onOnceRemoveRegistration","registrationObj"],"sources":["C:/Users/thund/OneDrive/Documents/HTML/breathanaylzer/node_modules/@react-native-firebase/database/lib/DatabaseSyncTree.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isString } from '@react-native-firebase/app/lib/common';\nimport NativeError from '@react-native-firebase/app/lib/internal/NativeFirebaseError';\nimport SharedEventEmitter from '@react-native-firebase/app/lib/internal/SharedEventEmitter';\nimport { NativeModules } from 'react-native';\nimport DatabaseDataSnapshot from './DatabaseDataSnapshot';\n\nclass DatabaseSyncTree {\n  constructor() {\n    this._tree = {};\n    this._reverseLookup = {};\n\n    SharedEventEmitter.addListener('database_sync_event', this._handleSyncEvent.bind(this));\n  }\n\n  get native() {\n    return NativeModules.RNFBDatabaseQueryModule;\n  }\n\n  /**\n   * Handles an incoming event from native\n   * @param event\n   * @private\n   */\n  _handleSyncEvent(event) {\n    const { body } = event;\n    if (body.error) {\n      this._handleErrorEvent(body);\n    } else {\n      this._handleValueEvent(body);\n    }\n  }\n\n  /**\n   * Routes native database query listener cancellation events to their js counterparts.\n   *\n   * @param event\n   * @private\n   */\n  _handleErrorEvent(event) {\n    // console.log('SyncTree.ERROR >>>', event);\n    const { eventRegistrationKey, registrationCancellationKey } = event.registration;\n\n    const registration = this.getRegistration(registrationCancellationKey);\n\n    if (registration) {\n      // build a new js error - we additionally attach\n      // the ref as a property for easier debugging\n      const error = NativeError.fromEvent(event.error, 'database');\n\n      // forward on to users .on(successCallback, cancellationCallback <-- listener\n      SharedEventEmitter.emit(registrationCancellationKey, error);\n\n      // remove the paired event registration - if we received a cancellation\n      // event then it's guaranteed that they'll be no further value events\n      this.removeRegistration(eventRegistrationKey);\n    }\n  }\n\n  /**\n   * Routes native database 'on' events to their js equivalent counterpart.\n   * If t is no longer any listeners remaining for this event we internally\n   * call the native unsub method to prevent further events coming through.\n   *\n   * @param event\n   * @private\n   */\n  _handleValueEvent(event) {\n    // console.log('SyncTree.VALUE >>>', event);\n    const { key, eventRegistrationKey } = event.registration;\n    const registration = this.getRegistration(eventRegistrationKey);\n    // console.log('SyncTree.registration >>>', registration);\n\n    if (!registration) {\n      // registration previously revoked\n      // notify native that the registration\n      // no longer exists so it can remove\n      // the native listeners\n      return this.native.off(key, eventRegistrationKey);\n    }\n\n    let snapshot;\n    let previousChildName;\n\n    // Value events don't return a previousChildName\n    if (event.eventType === 'value') {\n      snapshot = new DatabaseDataSnapshot(registration.ref, event.data);\n    } else {\n      snapshot = new DatabaseDataSnapshot(registration.ref, event.data.snapshot);\n      previousChildName = event.data.previousChildName;\n    }\n\n    // forward on to users .on(successCallback <-- listener\n    return SharedEventEmitter.emit(eventRegistrationKey, snapshot, previousChildName);\n  }\n\n  /**\n   * Returns registration information such as appName, ref, path and registration keys.\n   *\n   * @param registration\n   * @return {null}\n   */\n  getRegistration(registration) {\n    return this._reverseLookup[registration]\n      ? Object.assign({}, this._reverseLookup[registration])\n      : null;\n  }\n\n  /**\n   * Removes all listeners for the specified registration keys.\n   *\n   * @param registrations\n   * @return {number}\n   */\n  removeListenersForRegistrations(registrations) {\n    if (isString(registrations)) {\n      this.removeRegistration(registrations);\n      SharedEventEmitter.removeAllListeners(registrations);\n      return 1;\n    }\n\n    if (!Array.isArray(registrations)) {\n      return 0;\n    }\n    for (let i = 0, len = registrations.length; i < len; i++) {\n      this.removeRegistration(registrations[i]);\n      SharedEventEmitter.removeAllListeners(registrations[i]);\n    }\n\n    return registrations.length;\n  }\n\n  /**\n   * Removes a specific listener from the specified registrations.\n   *\n   * @param listener\n   * @param registrations\n   * @return {Array} array of registrations removed\n   */\n  removeListenerRegistrations(listener, registrations) {\n    if (!Array.isArray(registrations)) {\n      return [];\n    }\n    const removed = [];\n\n    for (let i = 0, len = registrations.length; i < len; i++) {\n      const registration = registrations[i];\n      let subscriptions;\n\n      // EventEmitter in react-native < 0.70 had a `_subscriber` property with a method for subscriptions by type...\n      if (SharedEventEmitter._subscriber) {\n        subscriptions = SharedEventEmitter._subscriber.getSubscriptionsForType(registration);\n      } else {\n        // ...react-native 0.70 now stores subscribers as a map of Sets by type in `_registry`\n        const registrySubscriptionsSet = SharedEventEmitter._registry[registration];\n        if (registrySubscriptionsSet) {\n          subscriptions = Array.from(registrySubscriptionsSet);\n        }\n      }\n\n      if (subscriptions) {\n        for (let j = 0, l = subscriptions.length; j < l; j++) {\n          const subscription = subscriptions[j];\n          // The subscription may have been removed during this event loop.\n          // its listener matches the listener in method parameters\n          if (subscription && subscription.listener === listener) {\n            subscription.remove();\n            removed.push(registration);\n            this.removeRegistration(registration);\n          }\n        }\n      }\n    }\n\n    return removed;\n  }\n\n  /**\n   * Returns an array of all registration keys for the specified path.\n   *\n   * @param path\n   * @return {Array}\n   */\n  getRegistrationsByPath(path) {\n    const out = [];\n    const eventKeys = Object.keys(this._tree[path] || {});\n\n    for (let i = 0, len = eventKeys.length; i < len; i++) {\n      Array.prototype.push.apply(out, Object.keys(this._tree[path][eventKeys[i]]));\n    }\n\n    return out;\n  }\n\n  /**\n   * Returns an array of all registration keys for the specified path and eventType.\n   *\n   * @param path\n   * @param eventType\n   * @return {Array}\n   */\n  getRegistrationsByPathEvent(path, eventType) {\n    if (!this._tree[path]) {\n      return [];\n    }\n    if (!this._tree[path][eventType]) {\n      return [];\n    }\n\n    return Object.keys(this._tree[path][eventType]);\n  }\n\n  /**\n   * Returns a single registration key for the specified path, eventType, and listener\n   *\n   * @param path\n   * @param eventType\n   * @param listener\n   * @return {Array}\n   */\n  getOneByPathEventListener(path, eventType, listener) {\n    if (!this._tree[path]) {\n      return null;\n    }\n    if (!this._tree[path][eventType]) {\n      return null;\n    }\n\n    const registrationsForPathEvent = Object.entries(this._tree[path][eventType]);\n\n    for (let i = 0; i < registrationsForPathEvent.length; i++) {\n      const registration = registrationsForPathEvent[i];\n      if (registration[1] === listener) {\n        return registration[0];\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Register a new listener.\n   *\n   * @param registration\n   */\n  addRegistration(registration) {\n    const { eventRegistrationKey, eventType, listener, once, path } = registration;\n\n    if (!this._tree[path]) {\n      this._tree[path] = {};\n    }\n    if (!this._tree[path][eventType]) {\n      this._tree[path][eventType] = {};\n    }\n\n    this._tree[path][eventType][eventRegistrationKey] = listener;\n    this._reverseLookup[eventRegistrationKey] = registration;\n\n    if (once) {\n      const subscription = SharedEventEmitter.addListener(eventRegistrationKey, event => {\n        this._onOnceRemoveRegistration(eventRegistrationKey, listener)(event);\n        subscription.remove();\n      });\n    } else {\n      SharedEventEmitter.addListener(eventRegistrationKey, listener);\n    }\n\n    return eventRegistrationKey;\n  }\n\n  /**\n   * Remove a registration, if it's not a `once` registration then instructs native\n   * to also remove the underlying database query listener.\n   *\n   * @param registration\n   * @return {boolean}\n   */\n  removeRegistration(registration) {\n    if (!this._reverseLookup[registration]) {\n      return false;\n    }\n    const { path, eventType, once } = this._reverseLookup[registration];\n\n    if (!this._tree[path]) {\n      delete this._reverseLookup[registration];\n      return false;\n    }\n\n    if (!this._tree[path][eventType]) {\n      delete this._reverseLookup[registration];\n      return false;\n    }\n\n    // we don't want `once` events to notify native as they're already\n    // automatically unsubscribed on native when the first event is sent\n    const registrationObj = this._reverseLookup[registration];\n    if (registrationObj && !once) {\n      this.native.off(registrationObj.key, registration);\n    }\n\n    delete this._tree[path][eventType][registration];\n    delete this._reverseLookup[registration];\n\n    return !!registrationObj;\n  }\n\n  /**\n   * Wraps a `once` listener with a new function that self de-registers.\n   *\n   * @param registration\n   * @param listener\n   * @return {function(...[*])}\n   * @private\n   */\n  _onOnceRemoveRegistration(registration, listener) {\n    return (...args) => {\n      this.removeRegistration(registration);\n      listener(...args);\n    };\n  }\n}\n\nexport default new DatabaseSyncTree();\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}