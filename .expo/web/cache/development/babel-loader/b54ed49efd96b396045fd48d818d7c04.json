{"ast":null,"code":"import Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { bloodSugarGraph } from \"../style/style\";\nimport Svg, { Path } from 'react-native-svg';\nimport { parseISO } from 'date-fns';\nimport * as d3 from 'd3';\nimport { Data } from \"./Data.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default (function () {\n  var sugarData = [95, 99, 112];\n  var yHideRatio = 0.8;\n  var defaultMax = 250;\n  var vw = Dimensions.get(\"window\").width;\n\n  for (var i = 0; i < Data.length; i++) {\n    console.log(Data[i][0]);\n    Data[i][0] = parseISO(Data[i][0]);\n    console.log(Data[i][0]);\n  }\n\n  var width = vw * .65;\n  var height = width;\n  var margin = {\n    top: vw * .1,\n    bottom: vw * .1,\n    left: vw * .06,\n    right: vw * .1\n  };\n  var xAxis = d3.scaleLinear().domain([new Date(Data[0][0]), new Date(Data[Data.length - 1][0])]).range([margin.left, width - margin.right]);\n  var yAxis = d3.scaleLinear().domain(d3.extent(Data.map(function (i) {\n    return i[1];\n  }))).range([height - margin.bottom, margin.top]);\n  var line = d3.line().x(function (i) {\n    return xAxis(i[0]);\n  }).y(function (i) {\n    return yAxis(i[1]);\n  });\n  var graph = line(Data);\n  var html = [];\n  yAxis.ticks().reverse().forEach(function (i) {\n    html.push(_jsx(Text, {\n      style: bloodSugarGraph.yLabel,\n      children: i\n    }, i));\n  });\n  return _jsxs(View, {\n    style: bloodSugarGraph.container,\n    children: [_jsxs(View, {\n      style: bloodSugarGraph.content,\n      children: [_jsx(View, {\n        style: bloodSugarGraph.unitContainer,\n        children: _jsx(Text, {\n          style: [bloodSugarGraph.unit, {\n            transform: [{\n              rotate: '270deg'\n            }]\n          }],\n          children: \"ppm\"\n        })\n      }), _jsx(View, {\n        style: bloodSugarGraph.labelContainer,\n        children: html\n      }), _jsx(Svg, {\n        width: width,\n        height: height,\n        xmlns: \"http://www.w3.org/2000/svg\",\n        children: _jsx(Path, {\n          fill: \"none\",\n          stroke: \"#ff9933\",\n          strokeWidth: vw * .015,\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          d: graph\n        })\n      })]\n    }), _jsx(View, {\n      style: bloodSugarGraph.xLabelContainer,\n      children: _jsx(Text, {\n        style: bloodSugarGraph.xLabel,\n        children: \"Acetone Levels\"\n      })\n    })]\n  });\n});","map":{"version":3,"names":["bloodSugarGraph","Svg","Path","parseISO","d3","Data","sugarData","yHideRatio","defaultMax","vw","Dimensions","get","width","i","length","console","log","height","margin","top","bottom","left","right","xAxis","scaleLinear","domain","Date","range","yAxis","extent","map","line","x","y","graph","html","ticks","reverse","forEach","push","yLabel","container","content","unitContainer","unit","transform","rotate","labelContainer","xLabelContainer","xLabel"],"sources":["C:/Users/thund/OneDrive/Documents/HTML/breathanaylzer/components/BloodSugarGraph.js"],"sourcesContent":["import { Dimensions, View, Text } from 'react-native';\r\nimport { bloodSugarGraph } from '../style/style';\r\nimport Svg, { Path } from 'react-native-svg';\r\nimport { parseISO } from 'date-fns'\r\nimport * as d3 from 'd3';\r\nimport { Data } from './Data.js';\r\n\r\nexport default () => {\r\n  const sugarData = [95, 99, 112];\r\n  let yHideRatio = 0.8;\r\n  let defaultMax = 250;\r\n\r\n  const vw = Dimensions.get(\"window\").width;\r\n\r\n  for (let i = 0; i < Data.length; i++) {\r\n    console.log(Data[i][0]);\r\n    Data[i][0] = parseISO(Data[i][0]);\r\n    console.log(Data[i][0]);\r\n  }\r\n\r\n  \r\n\r\n  const width = vw * .65;\r\n  const height = width;\r\n  const margin = {\r\n    top: vw * .1,\r\n    bottom: vw * .1,\r\n    left: vw * .06,\r\n    right: vw * .1,\r\n  }\r\n\r\n  const xAxis = d3.scaleLinear()\r\n    .domain([new Date(Data[0][0]), new Date(Data[Data.length - 1][0])])\r\n    .range([margin.left, width - margin.right]);\r\n\r\n  const yAxis = d3.scaleLinear()\r\n    .domain(d3.extent(Data.map((i) => i[1])))\r\n    .range([height - margin.bottom, margin.top]);\r\n\r\n  const line = d3.line()\r\n    .x(i => xAxis(i[0]))\r\n    .y(i => yAxis(i[1]))\r\n  let graph = line(Data);\r\n  let html = [];\r\n\r\n  yAxis.ticks().reverse().forEach((i) => {\r\n    html.push(<Text key={i} style={bloodSugarGraph.yLabel}>{i}</Text>)\r\n  });\r\n\r\n  return (\r\n    <View style={bloodSugarGraph.container}>\r\n      <View style={bloodSugarGraph.content}>\r\n        <View style={bloodSugarGraph.unitContainer}>\r\n          <Text style={[bloodSugarGraph.unit,\r\n          {\r\n            transform: [{ rotate: '270deg' }]\r\n          }]}>\r\n            ppm</Text>\r\n        </View>\r\n        <View style={bloodSugarGraph.labelContainer}>\r\n          {html}\r\n        </View>\r\n        <Svg\r\n          width={width}\r\n          height={height}\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n        >\r\n          <Path\r\n            fill=\"none\"\r\n            // stroke=\"#ff7e40\"\r\n            stroke=\"#ff9933\"\r\n            // stroke=\"#66cc99\"\r\n            strokeWidth={vw * .015}\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            d={graph}\r\n          />\r\n        </Svg>\r\n      </View>\r\n      <View style={bloodSugarGraph.xLabelContainer}>\r\n        <Text style={bloodSugarGraph.xLabel}>Acetone Levels</Text>\r\n      </View>\r\n    </View>\r\n  );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}