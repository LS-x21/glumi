{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"bottom\"],\n    _excluded2 = [\"renderBase\", \"renderAccessory\", \"containerStyle\", \"labelContainerStyle\", \"overlayStyle\", \"pickerStyle\", \"rippleInsets\", \"rippleOpacity\", \"rippleCentered\", \"rippleSequential\", \"hitSlop\", \"pressRetentionOffset\", \"testID\", \"nativeID\", \"accessible\", \"accessibilityLabel\", \"supportedOrientations\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport PropTypes from 'prop-types';\nimport React, { PureComponent } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { ViewPropTypes } from \"react-native-web/dist/index\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Ripple from 'react-native-material-ripple';\nimport { TextInput } from 'react-native-paper';\nimport DropdownItem from \"../item\";\nimport styles from \"./styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Dropdown = function (_PureComponent) {\n  _inherits(Dropdown, _PureComponent);\n\n  var _super = _createSuper(Dropdown);\n\n  function Dropdown(props) {\n    var _this;\n\n    _classCallCheck(this, Dropdown);\n\n    _this = _super.call(this, props);\n    _this.onPress = _this.onPress.bind(_assertThisInitialized(_this));\n    _this.onClose = _this.onClose.bind(_assertThisInitialized(_this));\n    _this.onSelect = _this.onSelect.bind(_assertThisInitialized(_this));\n    _this.onLayout = _this.onLayout.bind(_assertThisInitialized(_this));\n    _this.updateRippleRef = _this.updateRef.bind(_assertThisInitialized(_this), 'ripple');\n    _this.updateContainerRef = _this.updateRef.bind(_assertThisInitialized(_this), 'container');\n    _this.updateScrollRef = _this.updateRef.bind(_assertThisInitialized(_this), 'scroll');\n    _this.renderAccessory = _this.renderAccessory.bind(_assertThisInitialized(_this));\n    _this.renderItem = _this.renderItem.bind(_assertThisInitialized(_this));\n    _this.keyExtractor = _this.keyExtractor.bind(_assertThisInitialized(_this));\n\n    _this.blur = function () {\n      return _this.onClose();\n    };\n\n    _this.focus = _this.onPress;\n    var value = _this.props.value;\n    _this.mounted = false;\n    _this.focused = false;\n    _this.state = {\n      opacity: new Animated.Value(0),\n      selected: -1,\n      modal: false,\n      value: value\n    };\n    return _this;\n  }\n\n  _createClass(Dropdown, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(_ref) {\n      var value = _ref.value;\n\n      if (value !== this.props.value) {\n        this.setState({\n          value: value\n        });\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.mounted = true;\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.mounted = false;\n    }\n  }, {\n    key: \"onPress\",\n    value: function onPress(event) {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          data = _this$props.data,\n          disabled = _this$props.disabled,\n          onFocus = _this$props.onFocus,\n          itemPadding = _this$props.itemPadding,\n          rippleDuration = _this$props.rippleDuration,\n          dropdownOffset = _this$props.dropdownOffset,\n          _this$props$dropdownM = _this$props.dropdownMargins,\n          minMargin = _this$props$dropdownM.min,\n          maxMargin = _this$props$dropdownM.max,\n          animationDuration = _this$props.animationDuration,\n          absoluteRTLLayout = _this$props.absoluteRTLLayout,\n          useNativeDriver = _this$props.useNativeDriver;\n\n      if (disabled) {\n        return;\n      }\n\n      var itemCount = data.length;\n      var timestamp = Date.now();\n\n      if (null != event) {\n        event.nativeEvent.locationY -= this.rippleInsets().top;\n        event.nativeEvent.locationX -= this.rippleInsets().left;\n        this.ripple.startRipple(event);\n      }\n\n      if (!itemCount) {\n        return;\n      }\n\n      this.focused = true;\n\n      if ('function' === typeof onFocus) {\n        onFocus();\n      }\n\n      var dimensions = Dimensions.get('window');\n      this.container.measureInWindow(function (x, y, containerWidth, containerHeight) {\n        var opacity = _this2.state.opacity;\n\n        if (I18nManager.isRTL && !absoluteRTLLayout) {\n          x = dimensions.width - (x + containerWidth);\n        }\n\n        var delay = Math.max(0, rippleDuration - animationDuration - (Date.now() - timestamp));\n\n        var selected = _this2.selectedIndex();\n\n        var leftInset;\n        var left = x + dropdownOffset.left - maxMargin;\n\n        if (left > minMargin) {\n          leftInset = maxMargin;\n        } else {\n          left = minMargin;\n          leftInset = minMargin;\n        }\n\n        var right = x + containerWidth + maxMargin;\n        var rightInset;\n\n        if (dimensions.width - right > minMargin) {\n          rightInset = maxMargin;\n        } else {\n          right = dimensions.width - minMargin;\n          rightInset = minMargin;\n        }\n\n        var top = y + dropdownOffset.top - itemPadding;\n\n        _this2.setState({\n          modal: true,\n          width: right - left,\n          top: top,\n          left: left,\n          leftInset: leftInset,\n          rightInset: rightInset,\n          selected: selected\n        });\n\n        setTimeout(function () {\n          if (_this2.mounted) {\n            _this2.resetScrollOffset();\n\n            Animated.timing(opacity, {\n              duration: animationDuration,\n              toValue: 1,\n              useNativeDriver: useNativeDriver\n            }).start(function () {\n              if (_this2.mounted && 'ios' === Platform.OS) {\n                var _ref2 = _this2.scroll || {},\n                    flashScrollIndicators = _ref2.flashScrollIndicators;\n\n                if ('function' === typeof flashScrollIndicators) {\n                  flashScrollIndicators.call(_this2.scroll);\n                }\n              }\n            });\n          }\n        }, delay);\n      });\n    }\n  }, {\n    key: \"onClose\",\n    value: function onClose() {\n      var _this3 = this;\n\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.state.value;\n      var _this$props2 = this.props,\n          onBlur = _this$props2.onBlur,\n          animationDuration = _this$props2.animationDuration,\n          useNativeDriver = _this$props2.useNativeDriver;\n      var opacity = this.state.opacity;\n      Animated.timing(opacity, {\n        duration: animationDuration,\n        toValue: 0,\n        useNativeDriver: useNativeDriver\n      }).start(function () {\n        _this3.focused = false;\n\n        if ('function' === typeof onBlur) {\n          onBlur();\n        }\n\n        if (_this3.mounted) {\n          _this3.setState({\n            value: value,\n            modal: false\n          });\n        }\n      });\n    }\n  }, {\n    key: \"onSelect\",\n    value: function onSelect(index) {\n      var _this4 = this;\n\n      var _this$props3 = this.props,\n          data = _this$props3.data,\n          valueExtractor = _this$props3.valueExtractor,\n          onChangeText = _this$props3.onChangeText,\n          animationDuration = _this$props3.animationDuration,\n          rippleDuration = _this$props3.rippleDuration;\n      var value = valueExtractor(data[index], index);\n      var delay = Math.max(0, rippleDuration - animationDuration);\n\n      if ('function' === typeof onChangeText) {\n        onChangeText(value, index, data);\n      }\n\n      setTimeout(function () {\n        return _this4.onClose(value);\n      }, delay);\n    }\n  }, {\n    key: \"onLayout\",\n    value: function onLayout(event) {\n      var onLayout = this.props.onLayout;\n\n      if ('function' === typeof onLayout) {\n        onLayout(event);\n      }\n    }\n  }, {\n    key: \"value\",\n    value: function value() {\n      var value = this.state.value;\n      return value;\n    }\n  }, {\n    key: \"selectedIndex\",\n    value: function selectedIndex() {\n      var value = this.state.value;\n      var _this$props4 = this.props,\n          data = _this$props4.data,\n          valueExtractor = _this$props4.valueExtractor;\n      return data.findIndex(function (item, index) {\n        return null != item && value === valueExtractor(item, index);\n      });\n    }\n  }, {\n    key: \"selectedItem\",\n    value: function selectedItem() {\n      var data = this.props.data;\n      return data[this.selectedIndex()];\n    }\n  }, {\n    key: \"isFocused\",\n    value: function isFocused() {\n      return this.focused;\n    }\n  }, {\n    key: \"itemSize\",\n    value: function itemSize() {\n      var _this$props5 = this.props,\n          fontSize = _this$props5.fontSize,\n          itemPadding = _this$props5.itemPadding;\n      return Math.ceil(fontSize * 1.5 + itemPadding * 2);\n    }\n  }, {\n    key: \"visibleItemCount\",\n    value: function visibleItemCount() {\n      var _this$props6 = this.props,\n          data = _this$props6.data,\n          itemCount = _this$props6.itemCount;\n      return Math.min(data.length, itemCount);\n    }\n  }, {\n    key: \"tailItemCount\",\n    value: function tailItemCount() {\n      return Math.max(this.visibleItemCount() - 2, 0);\n    }\n  }, {\n    key: \"rippleInsets\",\n    value: function rippleInsets() {\n      var _ref3 = this.props.rippleInsets || {},\n          _ref3$top = _ref3.top,\n          top = _ref3$top === void 0 ? 16 : _ref3$top,\n          _ref3$right = _ref3.right,\n          right = _ref3$right === void 0 ? 0 : _ref3$right,\n          _ref3$bottom = _ref3.bottom,\n          bottom = _ref3$bottom === void 0 ? -8 : _ref3$bottom,\n          _ref3$left = _ref3.left,\n          left = _ref3$left === void 0 ? 0 : _ref3$left;\n\n      return {\n        top: top,\n        right: right,\n        bottom: bottom,\n        left: left\n      };\n    }\n  }, {\n    key: \"resetScrollOffset\",\n    value: function resetScrollOffset() {\n      var selected = this.state.selected;\n      var _this$props7 = this.props,\n          data = _this$props7.data,\n          dropdownPosition = _this$props7.dropdownPosition;\n      var offset = 0;\n      var itemCount = data.length;\n      var itemSize = this.itemSize();\n      var tailItemCount = this.tailItemCount();\n      var visibleItemCount = this.visibleItemCount();\n\n      if (itemCount > visibleItemCount) {\n        if (null == dropdownPosition) {\n          switch (selected) {\n            case -1:\n              break;\n\n            case 0:\n            case 1:\n              break;\n\n            default:\n              if (selected >= itemCount - tailItemCount) {\n                offset = itemSize * (itemCount - visibleItemCount);\n              } else {\n                offset = itemSize * (selected - 1);\n              }\n\n          }\n        } else {\n          var index = selected - dropdownPosition;\n\n          if (dropdownPosition < 0) {\n            index -= visibleItemCount;\n          }\n\n          index = Math.max(0, index);\n          index = Math.min(index, itemCount - visibleItemCount);\n\n          if (~selected) {\n            offset = itemSize * index;\n          }\n        }\n      }\n\n      if (this.scroll) {\n        this.scroll.scrollToOffset({\n          offset: offset,\n          animated: false\n        });\n      }\n    }\n  }, {\n    key: \"updateRef\",\n    value: function updateRef(name, ref) {\n      this[name] = ref;\n    }\n  }, {\n    key: \"keyExtractor\",\n    value: function keyExtractor(item, index) {\n      var valueExtractor = this.props.valueExtractor;\n      return index + \"-\" + valueExtractor(item, index);\n    }\n  }, {\n    key: \"renderBase\",\n    value: function renderBase(props) {\n      var value = this.state.value;\n      var _this$props8 = this.props,\n          data = _this$props8.data,\n          renderBase = _this$props8.renderBase,\n          labelExtractor = _this$props8.labelExtractor,\n          dropdownOffset = _this$props8.dropdownOffset,\n          _this$props8$renderAc = _this$props8.renderAccessory,\n          renderAccessory = _this$props8$renderAc === void 0 ? this.renderAccessory : _this$props8$renderAc;\n      var index = this.selectedIndex();\n      var title;\n\n      if (~index) {\n        title = labelExtractor(data[index], index);\n      }\n\n      if (null == title) {\n        title = value;\n      }\n\n      if ('function' === typeof renderBase) {\n        return renderBase(_objectSpread(_objectSpread({}, props), {}, {\n          title: title,\n          value: value,\n          renderAccessory: renderAccessory\n        }));\n      }\n\n      title = null == title || 'string' === typeof title ? title : String(title);\n      return _jsx(TextInput, _objectSpread(_objectSpread({\n        style: {\n          backgroundColor: \"transparent\",\n          marginBottom: 16\n        },\n        label: \"\"\n      }, props), {}, {\n        value: title,\n        editable: false,\n        onChangeText: undefined,\n        renderAccessory: renderAccessory\n      }));\n    }\n  }, {\n    key: \"renderRipple\",\n    value: function renderRipple() {\n      var _this$props9 = this.props,\n          baseColor = _this$props9.baseColor,\n          _this$props9$rippleCo = _this$props9.rippleColor,\n          rippleColor = _this$props9$rippleCo === void 0 ? baseColor : _this$props9$rippleCo,\n          rippleOpacity = _this$props9.rippleOpacity,\n          rippleDuration = _this$props9.rippleDuration,\n          rippleCentered = _this$props9.rippleCentered,\n          rippleSequential = _this$props9.rippleSequential;\n\n      var _this$rippleInsets = this.rippleInsets(),\n          bottom = _this$rippleInsets.bottom,\n          insets = _objectWithoutProperties(_this$rippleInsets, _excluded);\n\n      var style = _objectSpread(_objectSpread({}, insets), {}, {\n        height: this.itemSize() - bottom,\n        position: 'absolute'\n      });\n\n      return _jsx(Ripple, {\n        style: style,\n        rippleColor: rippleColor,\n        rippleDuration: rippleDuration,\n        rippleOpacity: rippleOpacity,\n        rippleCentered: rippleCentered,\n        rippleSequential: rippleSequential,\n        ref: this.updateRippleRef\n      });\n    }\n  }, {\n    key: \"renderAccessory\",\n    value: function renderAccessory() {\n      var backgroundColor = this.props.baseColor;\n      var triangleStyle = {\n        backgroundColor: backgroundColor\n      };\n      return _jsx(View, {\n        style: styles.accessory,\n        children: _jsx(View, {\n          style: styles.triangleContainer,\n          children: _jsx(View, {\n            style: [styles.triangle, triangleStyle]\n          })\n        })\n      });\n    }\n  }, {\n    key: \"renderItem\",\n    value: function renderItem(_ref4) {\n      var item = _ref4.item,\n          index = _ref4.index;\n\n      if (null == item) {\n        return null;\n      }\n\n      var _this$state = this.state,\n          selected = _this$state.selected,\n          leftInset = _this$state.leftInset,\n          rightInset = _this$state.rightInset;\n      var _this$props10 = this.props,\n          valueExtractor = _this$props10.valueExtractor,\n          labelExtractor = _this$props10.labelExtractor,\n          propsExtractor = _this$props10.propsExtractor,\n          textColor = _this$props10.textColor,\n          itemColor = _this$props10.itemColor,\n          baseColor = _this$props10.baseColor,\n          _this$props10$selecte = _this$props10.selectedItemColor,\n          selectedItemColor = _this$props10$selecte === void 0 ? textColor : _this$props10$selecte,\n          _this$props10$disable = _this$props10.disabledItemColor,\n          disabledItemColor = _this$props10$disable === void 0 ? baseColor : _this$props10$disable,\n          fontSize = _this$props10.fontSize,\n          itemTextStyle = _this$props10.itemTextStyle,\n          rippleOpacity = _this$props10.rippleOpacity,\n          rippleDuration = _this$props10.rippleDuration,\n          shadeOpacity = _this$props10.shadeOpacity;\n      var props = propsExtractor(item, index);\n\n      var _props = props = _objectSpread(_objectSpread({\n        rippleDuration: rippleDuration,\n        rippleOpacity: rippleOpacity,\n        rippleColor: baseColor,\n        shadeColor: baseColor,\n        shadeOpacity: shadeOpacity\n      }, props), {}, {\n        onPress: this.onSelect\n      }),\n          style = _props.style,\n          disabled = _props.disabled;\n\n      var value = valueExtractor(item, index);\n      var label = labelExtractor(item, index);\n      var title = null == label ? value : label;\n      var color = disabled ? disabledItemColor : ~selected ? index === selected ? selectedItemColor : itemColor : selectedItemColor;\n      var textStyle = {\n        color: color,\n        fontSize: fontSize\n      };\n      props.style = [style, {\n        height: this.itemSize(),\n        paddingLeft: leftInset,\n        paddingRight: rightInset\n      }];\n      return _jsx(DropdownItem, _objectSpread(_objectSpread({\n        index: index\n      }, props), {}, {\n        children: _jsx(Text, {\n          style: [styles.item, itemTextStyle, textStyle],\n          numberOfLines: 1,\n          children: title\n        })\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props11 = this.props,\n          renderBase = _this$props11.renderBase,\n          renderAccessory = _this$props11.renderAccessory,\n          containerStyle = _this$props11.containerStyle,\n          labelContainerStyle = _this$props11.labelContainerStyle,\n          overlayStyleOverrides = _this$props11.overlayStyle,\n          pickerStyleOverrides = _this$props11.pickerStyle,\n          rippleInsets = _this$props11.rippleInsets,\n          rippleOpacity = _this$props11.rippleOpacity,\n          rippleCentered = _this$props11.rippleCentered,\n          rippleSequential = _this$props11.rippleSequential,\n          hitSlop = _this$props11.hitSlop,\n          pressRetentionOffset = _this$props11.pressRetentionOffset,\n          testID = _this$props11.testID,\n          nativeID = _this$props11.nativeID,\n          accessible = _this$props11.accessible,\n          accessibilityLabel = _this$props11.accessibilityLabel,\n          supportedOrientations = _this$props11.supportedOrientations,\n          props = _objectWithoutProperties(_this$props11, _excluded2);\n\n      var data = props.data,\n          disabled = props.disabled,\n          itemPadding = props.itemPadding,\n          dropdownPosition = props.dropdownPosition;\n      var _this$state2 = this.state,\n          left = _this$state2.left,\n          top = _this$state2.top,\n          width = _this$state2.width,\n          opacity = _this$state2.opacity,\n          selected = _this$state2.selected,\n          modal = _this$state2.modal;\n      var itemCount = data.length;\n      var visibleItemCount = this.visibleItemCount();\n      var tailItemCount = this.tailItemCount();\n      var itemSize = this.itemSize();\n      var height = 2 * itemPadding + itemSize * visibleItemCount;\n      var translateY = -itemPadding;\n\n      if (null == dropdownPosition) {\n        switch (selected) {\n          case -1:\n            translateY -= 1 === itemCount ? 0 : itemSize;\n            break;\n\n          case 0:\n            break;\n\n          default:\n            if (selected >= itemCount - tailItemCount) {\n              translateY -= itemSize * (visibleItemCount - (itemCount - selected));\n            } else {\n              translateY -= itemSize;\n            }\n\n        }\n      } else {\n        if (dropdownPosition < 0) {\n          translateY -= itemSize * (visibleItemCount + dropdownPosition);\n        } else {\n          translateY -= itemSize * dropdownPosition;\n        }\n      }\n\n      var overlayStyle = {\n        opacity: opacity\n      };\n      var pickerStyle = {\n        width: width,\n        height: height,\n        top: top,\n        left: left,\n        transform: [{\n          translateY: translateY\n        }]\n      };\n      var touchableProps = {\n        disabled: disabled,\n        hitSlop: hitSlop,\n        pressRetentionOffset: pressRetentionOffset,\n        onPress: this.onPress,\n        testID: testID,\n        nativeID: nativeID,\n        accessible: accessible,\n        accessibilityLabel: accessibilityLabel\n      };\n      return _jsxs(View, {\n        onLayout: this.onLayout,\n        ref: this.updateContainerRef,\n        style: containerStyle,\n        children: [_jsx(TouchableWithoutFeedback, _objectSpread(_objectSpread({}, touchableProps), {}, {\n          children: _jsxs(View, {\n            pointerEvents: \"box-only\",\n            children: [this.renderBase(props), this.renderRipple()]\n          })\n        })), _jsx(Modal, {\n          visible: modal,\n          transparent: true,\n          onRequestClose: this.blur,\n          supportedOrientations: supportedOrientations,\n          children: _jsx(Animated.View, {\n            style: [styles.overlay, overlayStyle, overlayStyleOverrides],\n            onStartShouldSetResponder: function onStartShouldSetResponder() {\n              return true;\n            },\n            onResponderRelease: this.blur,\n            children: _jsx(View, {\n              style: [styles.picker, pickerStyle, pickerStyleOverrides],\n              onStartShouldSetResponder: function onStartShouldSetResponder() {\n                return true;\n              },\n              children: _jsx(FlatList, {\n                ref: this.updateScrollRef,\n                data: data,\n                style: styles.scroll,\n                renderItem: this.renderItem,\n                keyExtractor: this.keyExtractor,\n                scrollEnabled: visibleItemCount < itemCount,\n                contentContainerStyle: styles.scrollContainer\n              })\n            })\n          })\n        })]\n      });\n    }\n  }]);\n\n  return Dropdown;\n}(PureComponent);\n\nDropdown.defaultProps = {\n  hitSlop: {\n    top: 6,\n    right: 4,\n    bottom: 6,\n    left: 4\n  },\n  disabled: false,\n  data: [],\n  valueExtractor: function valueExtractor() {\n    var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        value = _ref5.value;\n\n    var index = arguments.length > 1 ? arguments[1] : undefined;\n    return value;\n  },\n  labelExtractor: function labelExtractor() {\n    var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        label = _ref6.label;\n\n    var index = arguments.length > 1 ? arguments[1] : undefined;\n    return label;\n  },\n  propsExtractor: function propsExtractor() {\n    return null;\n  },\n  absoluteRTLLayout: false,\n  dropdownOffset: {\n    top: 32,\n    left: 0\n  },\n  dropdownMargins: {\n    min: 8,\n    max: 16\n  },\n  rippleCentered: false,\n  rippleSequential: true,\n  rippleInsets: {\n    top: 16,\n    right: 0,\n    bottom: -8,\n    left: 0\n  },\n  rippleOpacity: 0.54,\n  shadeOpacity: 0.12,\n  rippleDuration: 400,\n  animationDuration: 225,\n  fontSize: 16,\n  textColor: 'rgba(0, 0, 0, .87)',\n  itemColor: 'rgba(0, 0, 0, .54)',\n  baseColor: 'rgba(0, 0, 0, .38)',\n  itemCount: 4,\n  itemPadding: 8,\n  supportedOrientations: ['portrait', 'portrait-upside-down', 'landscape', 'landscape-left', 'landscape-right'],\n  useNativeDriver: false\n};\nDropdown.propTypes = _objectSpread(_objectSpread({}, TouchableWithoutFeedback.propTypes), {}, {\n  disabled: PropTypes.bool,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  data: PropTypes.arrayOf(PropTypes.object),\n  valueExtractor: PropTypes.func,\n  labelExtractor: PropTypes.func,\n  propsExtractor: PropTypes.func,\n  absoluteRTLLayout: PropTypes.bool,\n  dropdownOffset: PropTypes.shape({\n    top: PropTypes.number.isRequired,\n    left: PropTypes.number.isRequired\n  }),\n  dropdownMargins: PropTypes.shape({\n    min: PropTypes.number.isRequired,\n    max: PropTypes.number.isRequired\n  }),\n  dropdownPosition: PropTypes.number,\n  rippleColor: PropTypes.string,\n  rippleCentered: PropTypes.bool,\n  rippleSequential: PropTypes.bool,\n  rippleInsets: PropTypes.shape({\n    top: PropTypes.number,\n    right: PropTypes.number,\n    bottom: PropTypes.number,\n    left: PropTypes.number\n  }),\n  rippleOpacity: PropTypes.number,\n  shadeOpacity: PropTypes.number,\n  rippleDuration: PropTypes.number,\n  animationDuration: PropTypes.number,\n  fontSize: PropTypes.number,\n  textColor: PropTypes.string,\n  itemColor: PropTypes.string,\n  selectedItemColor: PropTypes.string,\n  disabledItemColor: PropTypes.string,\n  baseColor: PropTypes.string,\n  itemTextStyle: Text.propTypes.style,\n  itemCount: PropTypes.number,\n  itemPadding: PropTypes.number,\n  onLayout: PropTypes.func,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  onChangeText: PropTypes.func,\n  renderBase: PropTypes.func,\n  renderAccessory: PropTypes.func,\n  labelContainerStyle: (ViewPropTypes || View.propTypes).style,\n  containerStyle: (ViewPropTypes || View.propTypes).style,\n  overlayStyle: (ViewPropTypes || View.propTypes).style,\n  pickerStyle: (ViewPropTypes || View.propTypes).style,\n  supportedOrientations: PropTypes.arrayOf(PropTypes.string),\n  useNativeDriver: PropTypes.bool\n});\nexport { Dropdown as default };","map":{"version":3,"names":["PropTypes","React","PureComponent","ViewPropTypes","Ripple","TextInput","DropdownItem","styles","Dropdown","props","onPress","bind","onClose","onSelect","onLayout","updateRippleRef","updateRef","updateContainerRef","updateScrollRef","renderAccessory","renderItem","keyExtractor","blur","focus","value","mounted","focused","state","opacity","Animated","Value","selected","modal","setState","event","data","disabled","onFocus","itemPadding","rippleDuration","dropdownOffset","dropdownMargins","minMargin","min","maxMargin","max","animationDuration","absoluteRTLLayout","useNativeDriver","itemCount","length","timestamp","Date","now","nativeEvent","locationY","rippleInsets","top","locationX","left","ripple","startRipple","dimensions","Dimensions","get","container","measureInWindow","x","y","containerWidth","containerHeight","I18nManager","isRTL","width","delay","Math","selectedIndex","leftInset","right","rightInset","setTimeout","resetScrollOffset","timing","duration","toValue","start","Platform","OS","scroll","flashScrollIndicators","call","onBlur","index","valueExtractor","onChangeText","findIndex","item","fontSize","ceil","visibleItemCount","bottom","dropdownPosition","offset","itemSize","tailItemCount","scrollToOffset","animated","name","ref","renderBase","labelExtractor","title","String","backgroundColor","marginBottom","undefined","baseColor","rippleColor","rippleOpacity","rippleCentered","rippleSequential","insets","style","height","position","triangleStyle","accessory","triangleContainer","triangle","propsExtractor","textColor","itemColor","selectedItemColor","disabledItemColor","itemTextStyle","shadeOpacity","shadeColor","label","color","textStyle","paddingLeft","paddingRight","containerStyle","labelContainerStyle","overlayStyleOverrides","overlayStyle","pickerStyleOverrides","pickerStyle","hitSlop","pressRetentionOffset","testID","nativeID","accessible","accessibilityLabel","supportedOrientations","translateY","transform","touchableProps","renderRipple","overlay","picker","scrollContainer","defaultProps","propTypes","TouchableWithoutFeedback","bool","oneOfType","string","number","arrayOf","object","func","shape","isRequired","Text","View"],"sources":["C:/Users/thund/OneDrive/Documents/HTML/breathanaylzer/node_modules/react-native-material-dropdown-v2/src/components/dropdown/index.js"],"sourcesContent":["import PropTypes from 'prop-types';\r\nimport React, { PureComponent } from 'react';\r\nimport {\r\n    Text,\r\n    View,\r\n    FlatList,\r\n    Animated,\r\n    Modal,\r\n    TouchableWithoutFeedback,\r\n    Dimensions,\r\n    Platform,\r\n    ViewPropTypes,\r\n    I18nManager,\r\n} from 'react-native';\r\nimport Ripple from 'react-native-material-ripple';\r\nimport { TextInput } from 'react-native-paper';\r\n\r\nimport DropdownItem from '../item';\r\nimport styles from './styles';\r\n\r\nexport default class Dropdown extends PureComponent {\r\n    static defaultProps = {\r\n        hitSlop: { top: 6, right: 4, bottom: 6, left: 4 },\r\n\r\n        disabled: false,\r\n\r\n        data: [],\r\n\r\n        valueExtractor: ({ value } = {}, index) => value,\r\n        labelExtractor: ({ label } = {}, index) => label,\r\n        propsExtractor: () => null,\r\n\r\n        absoluteRTLLayout: false,\r\n\r\n        dropdownOffset: {\r\n            top: 32,\r\n            left: 0,\r\n        },\r\n\r\n        dropdownMargins: {\r\n            min: 8,\r\n            max: 16,\r\n        },\r\n\r\n        rippleCentered: false,\r\n        rippleSequential: true,\r\n\r\n        rippleInsets: {\r\n            top: 16,\r\n            right: 0,\r\n            bottom: -8,\r\n            left: 0,\r\n        },\r\n\r\n        rippleOpacity: 0.54,\r\n        shadeOpacity: 0.12,\r\n\r\n        rippleDuration: 400,\r\n        animationDuration: 225,\r\n\r\n        fontSize: 16,\r\n\r\n        textColor: 'rgba(0, 0, 0, .87)',\r\n        itemColor: 'rgba(0, 0, 0, .54)',\r\n        baseColor: 'rgba(0, 0, 0, .38)',\r\n\r\n        itemCount: 4,\r\n        itemPadding: 8,\r\n\r\n        supportedOrientations: [\r\n            'portrait',\r\n            'portrait-upside-down',\r\n            'landscape',\r\n            'landscape-left',\r\n            'landscape-right',\r\n        ],\r\n\r\n        useNativeDriver: false,\r\n    };\r\n\r\n    static propTypes = {\r\n        ...TouchableWithoutFeedback.propTypes,\r\n\r\n        disabled: PropTypes.bool,\r\n\r\n        value: PropTypes.oneOfType([\r\n            PropTypes.string,\r\n            PropTypes.number,\r\n        ]),\r\n\r\n        data: PropTypes.arrayOf(PropTypes.object),\r\n\r\n        valueExtractor: PropTypes.func,\r\n        labelExtractor: PropTypes.func,\r\n        propsExtractor: PropTypes.func,\r\n\r\n        absoluteRTLLayout: PropTypes.bool,\r\n\r\n        dropdownOffset: PropTypes.shape({\r\n            top: PropTypes.number.isRequired,\r\n            left: PropTypes.number.isRequired,\r\n        }),\r\n\r\n        dropdownMargins: PropTypes.shape({\r\n            min: PropTypes.number.isRequired,\r\n            max: PropTypes.number.isRequired,\r\n        }),\r\n\r\n        dropdownPosition: PropTypes.number,\r\n\r\n        rippleColor: PropTypes.string,\r\n        rippleCentered: PropTypes.bool,\r\n        rippleSequential: PropTypes.bool,\r\n\r\n        rippleInsets: PropTypes.shape({\r\n            top: PropTypes.number,\r\n            right: PropTypes.number,\r\n            bottom: PropTypes.number,\r\n            left: PropTypes.number,\r\n        }),\r\n\r\n        rippleOpacity: PropTypes.number,\r\n        shadeOpacity: PropTypes.number,\r\n\r\n        rippleDuration: PropTypes.number,\r\n        animationDuration: PropTypes.number,\r\n\r\n        fontSize: PropTypes.number,\r\n\r\n        textColor: PropTypes.string,\r\n        itemColor: PropTypes.string,\r\n        selectedItemColor: PropTypes.string,\r\n        disabledItemColor: PropTypes.string,\r\n        baseColor: PropTypes.string,\r\n\r\n        itemTextStyle: Text.propTypes.style,\r\n\r\n        itemCount: PropTypes.number,\r\n        itemPadding: PropTypes.number,\r\n\r\n        onLayout: PropTypes.func,\r\n        onFocus: PropTypes.func,\r\n        onBlur: PropTypes.func,\r\n        onChangeText: PropTypes.func,\r\n\r\n        renderBase: PropTypes.func,\r\n        renderAccessory: PropTypes.func,\r\n\r\n        labelContainerStyle: (ViewPropTypes || View.propTypes).style,\r\n        containerStyle: (ViewPropTypes || View.propTypes).style,\r\n        overlayStyle: (ViewPropTypes || View.propTypes).style,\r\n        pickerStyle: (ViewPropTypes || View.propTypes).style,\r\n\r\n        supportedOrientations: PropTypes.arrayOf(PropTypes.string),\r\n\r\n        useNativeDriver: PropTypes.bool,\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onPress = this.onPress.bind(this);\r\n        this.onClose = this.onClose.bind(this);\r\n        this.onSelect = this.onSelect.bind(this);\r\n        this.onLayout = this.onLayout.bind(this);\r\n\r\n        this.updateRippleRef = this.updateRef.bind(this, 'ripple');\r\n        this.updateContainerRef = this.updateRef.bind(this, 'container');\r\n        this.updateScrollRef = this.updateRef.bind(this, 'scroll');\r\n\r\n        this.renderAccessory = this.renderAccessory.bind(this);\r\n        this.renderItem = this.renderItem.bind(this);\r\n\r\n        this.keyExtractor = this.keyExtractor.bind(this);\r\n\r\n        this.blur = () => this.onClose();\r\n        this.focus = this.onPress;\r\n\r\n        let { value } = this.props;\r\n\r\n        this.mounted = false;\r\n        this.focused = false;\r\n\r\n        this.state = {\r\n            opacity: new Animated.Value(0),\r\n            selected: -1,\r\n            modal: false,\r\n            value,\r\n        };\r\n    }\r\n\r\n    componentWillReceiveProps({ value }) {\r\n        if (value !== this.props.value) {\r\n            this.setState({ value });\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.mounted = true;\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.mounted = false;\r\n    }\r\n\r\n    onPress(event) {\r\n        let {\r\n            data,\r\n            disabled,\r\n            onFocus,\r\n            itemPadding,\r\n            rippleDuration,\r\n            dropdownOffset,\r\n            dropdownMargins: { min: minMargin, max: maxMargin },\r\n            animationDuration,\r\n            absoluteRTLLayout,\r\n            useNativeDriver,\r\n        } = this.props;\r\n\r\n        if (disabled) {\r\n            return;\r\n        }\r\n\r\n        let itemCount = data.length;\r\n        let timestamp = Date.now();\r\n\r\n        if (null != event) {\r\n            /* Adjust event location */\r\n            event.nativeEvent.locationY -= this.rippleInsets().top;\r\n            event.nativeEvent.locationX -= this.rippleInsets().left;\r\n\r\n            /* Start ripple directly from event */\r\n            this.ripple.startRipple(event);\r\n        }\r\n\r\n        if (!itemCount) {\r\n            return;\r\n        }\r\n\r\n        this.focused = true;\r\n\r\n        if ('function' === typeof onFocus) {\r\n            onFocus();\r\n        }\r\n\r\n        let dimensions = Dimensions.get('window');\r\n\r\n        this.container.measureInWindow((x, y, containerWidth, containerHeight) => {\r\n            let { opacity } = this.state;\r\n\r\n            /* Adjust coordinates for relative layout in RTL locale */\r\n            if (I18nManager.isRTL && !absoluteRTLLayout) {\r\n                x = dimensions.width - (x + containerWidth);\r\n            }\r\n\r\n            let delay = Math.max(0, rippleDuration - animationDuration - (Date.now() - timestamp));\r\n            let selected = this.selectedIndex();\r\n\r\n            let leftInset;\r\n            let left = x\r\n                + dropdownOffset.left\r\n                - maxMargin;\r\n\r\n            if (left > minMargin) {\r\n                leftInset = maxMargin;\r\n            } else {\r\n                left = minMargin;\r\n                leftInset = minMargin;\r\n            }\r\n\r\n            let right = x + containerWidth + maxMargin;\r\n            let rightInset;\r\n\r\n            if (dimensions.width - right > minMargin) {\r\n                rightInset = maxMargin;\r\n            } else {\r\n                right = dimensions.width - minMargin;\r\n                rightInset = minMargin;\r\n            }\r\n\r\n            let top = y\r\n                + dropdownOffset.top\r\n                - itemPadding;\r\n\r\n            this.setState({\r\n                modal: true,\r\n                width: right - left,\r\n                top,\r\n                left,\r\n                leftInset,\r\n                rightInset,\r\n                selected,\r\n            });\r\n\r\n            setTimeout((() => {\r\n                if (this.mounted) {\r\n                    this.resetScrollOffset();\r\n\r\n                    Animated\r\n                        .timing(opacity, {\r\n                            duration: animationDuration,\r\n                            toValue: 1,\r\n                            useNativeDriver,\r\n                        })\r\n                        .start(() => {\r\n                            if (this.mounted && 'ios' === Platform.OS) {\r\n                                let { flashScrollIndicators } = this.scroll || {};\r\n\r\n                                if ('function' === typeof flashScrollIndicators) {\r\n                                    flashScrollIndicators.call(this.scroll);\r\n                                }\r\n                            }\r\n                        });\r\n                }\r\n            }), delay);\r\n        });\r\n    }\r\n\r\n    onClose(value = this.state.value) {\r\n        let { onBlur, animationDuration, useNativeDriver } = this.props;\r\n        let { opacity } = this.state;\r\n\r\n        Animated\r\n            .timing(opacity, {\r\n                duration: animationDuration,\r\n                toValue: 0,\r\n                useNativeDriver,\r\n            })\r\n            .start(() => {\r\n                this.focused = false;\r\n\r\n                if ('function' === typeof onBlur) {\r\n                    onBlur();\r\n                }\r\n\r\n                if (this.mounted) {\r\n                    this.setState({ value, modal: false });\r\n                }\r\n            });\r\n    }\r\n\r\n    onSelect(index) {\r\n        let {\r\n            data,\r\n            valueExtractor,\r\n            onChangeText,\r\n            animationDuration,\r\n            rippleDuration,\r\n        } = this.props;\r\n\r\n        let value = valueExtractor(data[index], index);\r\n        let delay = Math.max(0, rippleDuration - animationDuration);\r\n\r\n        if ('function' === typeof onChangeText) {\r\n            onChangeText(value, index, data);\r\n        }\r\n\r\n        setTimeout(() => this.onClose(value), delay);\r\n    }\r\n\r\n    onLayout(event) {\r\n        let { onLayout } = this.props;\r\n\r\n        if ('function' === typeof onLayout) {\r\n            onLayout(event);\r\n        }\r\n    }\r\n\r\n    value() {\r\n        let { value } = this.state;\r\n\r\n        return value;\r\n    }\r\n\r\n    selectedIndex() {\r\n        let { value } = this.state;\r\n        let { data, valueExtractor } = this.props;\r\n\r\n        return data\r\n            .findIndex((item, index) => null != item && value === valueExtractor(item, index));\r\n    }\r\n\r\n    selectedItem() {\r\n        let { data } = this.props;\r\n\r\n        return data[this.selectedIndex()];\r\n    }\r\n\r\n    isFocused() {\r\n        return this.focused;\r\n    }\r\n\r\n    itemSize() {\r\n        let { fontSize, itemPadding } = this.props;\r\n\r\n        return Math.ceil(fontSize * 1.5 + itemPadding * 2);\r\n    }\r\n\r\n    visibleItemCount() {\r\n        let { data, itemCount } = this.props;\r\n\r\n        return Math.min(data.length, itemCount);\r\n    }\r\n\r\n    tailItemCount() {\r\n        return Math.max(this.visibleItemCount() - 2, 0);\r\n    }\r\n\r\n    rippleInsets() {\r\n        let {\r\n            top = 16,\r\n            right = 0,\r\n            bottom = -8,\r\n            left = 0,\r\n        } = this.props.rippleInsets || {};\r\n\r\n        return { top, right, bottom, left };\r\n    }\r\n\r\n    resetScrollOffset() {\r\n        let { selected } = this.state;\r\n        let { data, dropdownPosition } = this.props;\r\n\r\n        let offset = 0;\r\n        let itemCount = data.length;\r\n        let itemSize = this.itemSize();\r\n        let tailItemCount = this.tailItemCount();\r\n        let visibleItemCount = this.visibleItemCount();\r\n\r\n        if (itemCount > visibleItemCount) {\r\n            if (null == dropdownPosition) {\r\n                switch (selected) {\r\n                    case -1:\r\n                        break;\r\n\r\n                    case 0:\r\n                    case 1:\r\n                        break;\r\n\r\n                    default:\r\n                        if (selected >= itemCount - tailItemCount) {\r\n                            offset = itemSize * (itemCount - visibleItemCount);\r\n                        } else {\r\n                            offset = itemSize * (selected - 1);\r\n                        }\r\n                }\r\n            } else {\r\n                let index = selected - dropdownPosition;\r\n\r\n                if (dropdownPosition < 0) {\r\n                    index -= visibleItemCount;\r\n                }\r\n\r\n                index = Math.max(0, index);\r\n                index = Math.min(index, itemCount - visibleItemCount);\r\n\r\n                if (~selected) {\r\n                    offset = itemSize * index;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.scroll) {\r\n            this.scroll.scrollToOffset({ offset, animated: false });\r\n        }\r\n    }\r\n\r\n    updateRef(name, ref) {\r\n        this[name] = ref;\r\n    }\r\n\r\n    keyExtractor(item, index) {\r\n        let { valueExtractor } = this.props;\r\n\r\n        return `${index}-${valueExtractor(item, index)}`;\r\n    }\r\n\r\n    renderBase(props) {\r\n        let { value } = this.state;\r\n        let {\r\n            data,\r\n            renderBase,\r\n            labelExtractor,\r\n            dropdownOffset,\r\n            renderAccessory = this.renderAccessory,\r\n        } = this.props;\r\n\r\n        let index = this.selectedIndex();\r\n        let title;\r\n\r\n        if (~index) {\r\n            title = labelExtractor(data[index], index);\r\n        }\r\n\r\n        if (null == title) {\r\n            title = value;\r\n        }\r\n\r\n        if ('function' === typeof renderBase) {\r\n            return renderBase({ ...props, title, value, renderAccessory });\r\n        }\r\n\r\n        title = null == title || 'string' === typeof title ?\r\n            title :\r\n            String(title);\r\n\r\n        return (\r\n            <TextInput\r\n                style={{backgroundColor: \"transparent\", marginBottom: 16}}\r\n                label=''\r\n                {...props}\r\n                value={title}\r\n                editable={false}\r\n                onChangeText={undefined}\r\n                renderAccessory={renderAccessory}\r\n            />\r\n        );\r\n    }\r\n\r\n    renderRipple() {\r\n        let {\r\n            baseColor,\r\n            rippleColor = baseColor,\r\n            rippleOpacity,\r\n            rippleDuration,\r\n            rippleCentered,\r\n            rippleSequential,\r\n        } = this.props;\r\n\r\n        let { bottom, ...insets } = this.rippleInsets();\r\n        let style = {\r\n            ...insets,\r\n\r\n            height: this.itemSize() - bottom,\r\n            position: 'absolute',\r\n        };\r\n\r\n        return (\r\n            <Ripple\r\n                style={style}\r\n                rippleColor={rippleColor}\r\n                rippleDuration={rippleDuration}\r\n                rippleOpacity={rippleOpacity}\r\n                rippleCentered={rippleCentered}\r\n                rippleSequential={rippleSequential}\r\n                ref={this.updateRippleRef}\r\n            />\r\n        );\r\n    }\r\n\r\n    renderAccessory() {\r\n        let { baseColor: backgroundColor } = this.props;\r\n        let triangleStyle = { backgroundColor };\r\n\r\n        return (\r\n            <View style={styles.accessory}>\r\n                <View style={styles.triangleContainer}>\r\n                    <View style={[styles.triangle, triangleStyle]} />\r\n                </View>\r\n            </View>\r\n        );\r\n    }\r\n\r\n    renderItem({ item, index }) {\r\n        if (null == item) {\r\n            return null;\r\n        }\r\n\r\n        let { selected, leftInset, rightInset } = this.state;\r\n\r\n        let {\r\n            valueExtractor,\r\n            labelExtractor,\r\n            propsExtractor,\r\n            textColor,\r\n            itemColor,\r\n            baseColor,\r\n            selectedItemColor = textColor,\r\n            disabledItemColor = baseColor,\r\n            fontSize,\r\n            itemTextStyle,\r\n            rippleOpacity,\r\n            rippleDuration,\r\n            shadeOpacity,\r\n        } = this.props;\r\n\r\n        let props = propsExtractor(item, index);\r\n\r\n        let { style, disabled }\r\n            = props\r\n            = {\r\n                rippleDuration,\r\n                rippleOpacity,\r\n                rippleColor: baseColor,\r\n\r\n                shadeColor: baseColor,\r\n                shadeOpacity,\r\n\r\n                ...props,\r\n\r\n                onPress: this.onSelect,\r\n            };\r\n\r\n        let value = valueExtractor(item, index);\r\n        let label = labelExtractor(item, index);\r\n\r\n        let title = null == label ?\r\n            value :\r\n            label;\r\n\r\n        let color = disabled ?\r\n            disabledItemColor :\r\n            ~selected ?\r\n                index === selected ?\r\n                    selectedItemColor :\r\n                    itemColor :\r\n                selectedItemColor;\r\n\r\n        let textStyle = { color, fontSize };\r\n\r\n        props.style = [\r\n            style,\r\n            {\r\n                height: this.itemSize(),\r\n                paddingLeft: leftInset,\r\n                paddingRight: rightInset,\r\n            },\r\n        ];\r\n\r\n        return (\r\n            <DropdownItem index={index} {...props}>\r\n                <Text style={[styles.item, itemTextStyle, textStyle]} numberOfLines={1}>\r\n                    {title}\r\n                </Text>\r\n            </DropdownItem>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let {\r\n            renderBase,\r\n            renderAccessory,\r\n            containerStyle,\r\n            labelContainerStyle,\r\n            overlayStyle: overlayStyleOverrides,\r\n            pickerStyle: pickerStyleOverrides,\r\n\r\n            rippleInsets,\r\n            rippleOpacity,\r\n            rippleCentered,\r\n            rippleSequential,\r\n\r\n            hitSlop,\r\n            pressRetentionOffset,\r\n            testID,\r\n            nativeID,\r\n            accessible,\r\n            accessibilityLabel,\r\n\r\n            supportedOrientations,\r\n\r\n            ...props\r\n        } = this.props;\r\n\r\n        let {\r\n            data,\r\n            disabled,\r\n            itemPadding,\r\n            dropdownPosition,\r\n        } = props;\r\n\r\n        let { left, top, width, opacity, selected, modal } = this.state;\r\n\r\n        let itemCount = data.length;\r\n        let visibleItemCount = this.visibleItemCount();\r\n        let tailItemCount = this.tailItemCount();\r\n        let itemSize = this.itemSize();\r\n\r\n        let height = 2 * itemPadding + itemSize * visibleItemCount;\r\n        let translateY = -itemPadding;\r\n\r\n        if (null == dropdownPosition) {\r\n            switch (selected) {\r\n                case -1:\r\n                    translateY -= 1 === itemCount ? 0 : itemSize;\r\n                    break;\r\n\r\n                case 0:\r\n                    break;\r\n\r\n                default:\r\n                    if (selected >= itemCount - tailItemCount) {\r\n                        translateY -= itemSize * (visibleItemCount - (itemCount - selected));\r\n                    } else {\r\n                        translateY -= itemSize;\r\n                    }\r\n            }\r\n        } else {\r\n            if (dropdownPosition < 0) {\r\n                translateY -= itemSize * (visibleItemCount + dropdownPosition);\r\n            } else {\r\n                translateY -= itemSize * dropdownPosition;\r\n            }\r\n        }\r\n\r\n        let overlayStyle = { opacity };\r\n\r\n        let pickerStyle = {\r\n            width,\r\n            height,\r\n            top,\r\n            left,\r\n            transform: [{ translateY }],\r\n        };\r\n\r\n        let touchableProps = {\r\n            disabled,\r\n            hitSlop,\r\n            pressRetentionOffset,\r\n            onPress: this.onPress,\r\n            testID,\r\n            nativeID,\r\n            accessible,\r\n            accessibilityLabel,\r\n        };\r\n\r\n        return (\r\n            <View onLayout={this.onLayout} ref={this.updateContainerRef} style={containerStyle}>\r\n                <TouchableWithoutFeedback {...touchableProps}>\r\n                    <View pointerEvents='box-only'>\r\n                        {this.renderBase(props)}\r\n                        {this.renderRipple()}\r\n                    </View>\r\n                </TouchableWithoutFeedback>\r\n\r\n                <Modal\r\n                    visible={modal}\r\n                    transparent={true}\r\n                    onRequestClose={this.blur}\r\n                    supportedOrientations={supportedOrientations}\r\n                >\r\n                    <Animated.View\r\n                        style={[styles.overlay, overlayStyle, overlayStyleOverrides]}\r\n                        onStartShouldSetResponder={() => true}\r\n                        onResponderRelease={this.blur}\r\n                    >\r\n                        <View\r\n                            style={[styles.picker, pickerStyle, pickerStyleOverrides]}\r\n                            onStartShouldSetResponder={() => true}\r\n                        >\r\n                            <FlatList\r\n                                ref={this.updateScrollRef}\r\n                                data={data}\r\n                                style={styles.scroll}\r\n                                renderItem={this.renderItem}\r\n                                keyExtractor={this.keyExtractor}\r\n                                scrollEnabled={visibleItemCount < itemCount}\r\n                                contentContainerStyle={styles.scrollContainer}\r\n                            />\r\n                        </View>\r\n                    </Animated.View>\r\n                </Modal>\r\n            </View>\r\n        );\r\n    }\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;;;;;;;;;SAUIC,a;;AAGJ,OAAOC,MAAP,MAAmB,8BAAnB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AAEA,OAAOC,YAAP;AACA,OAAOC,MAAP;;;;IAEqBC,Q;;;;;EA0IjB,kBAAYC,KAAZ,EAAmB;IAAA;;IAAA;;IACf,0BAAMA,KAAN;IAEA,MAAKC,OAAL,GAAe,MAAKA,OAAL,CAAaC,IAAb,+BAAf;IACA,MAAKC,OAAL,GAAe,MAAKA,OAAL,CAAaD,IAAb,+BAAf;IACA,MAAKE,QAAL,GAAgB,MAAKA,QAAL,CAAcF,IAAd,+BAAhB;IACA,MAAKG,QAAL,GAAgB,MAAKA,QAAL,CAAcH,IAAd,+BAAhB;IAEA,MAAKI,eAAL,GAAuB,MAAKC,SAAL,CAAeL,IAAf,gCAA0B,QAA1B,CAAvB;IACA,MAAKM,kBAAL,GAA0B,MAAKD,SAAL,CAAeL,IAAf,gCAA0B,WAA1B,CAA1B;IACA,MAAKO,eAAL,GAAuB,MAAKF,SAAL,CAAeL,IAAf,gCAA0B,QAA1B,CAAvB;IAEA,MAAKQ,eAAL,GAAuB,MAAKA,eAAL,CAAqBR,IAArB,+BAAvB;IACA,MAAKS,UAAL,GAAkB,MAAKA,UAAL,CAAgBT,IAAhB,+BAAlB;IAEA,MAAKU,YAAL,GAAoB,MAAKA,YAAL,CAAkBV,IAAlB,+BAApB;;IAEA,MAAKW,IAAL,GAAY;MAAA,OAAM,MAAKV,OAAL,EAAN;IAAA,CAAZ;;IACA,MAAKW,KAAL,GAAa,MAAKb,OAAlB;IAEA,IAAMc,KAAN,GAAgB,MAAKf,KAArB,CAAMe,KAAN;IAEA,MAAKC,OAAL,GAAe,KAAf;IACA,MAAKC,OAAL,GAAe,KAAf;IAEA,MAAKC,KAAL,GAAa;MACTC,OAAO,EAAE,IAAIC,QAAQ,CAACC,KAAb,CAAmB,CAAnB,CADA;MAETC,QAAQ,EAAE,CAAC,CAFF;MAGTC,KAAK,EAAE,KAHE;MAITR,KAAK,EAALA;IAJS,CAAb;IAzBe;EA+BlB;;;;WAED,yCAAqC;MAAA,IAATA,KAAS,QAATA,KAAS;;MACjC,IAAIA,KAAK,KAAK,KAAKf,KAAL,CAAWe,KAAzB,EAAgC;QAC5B,KAAKS,QAAL,CAAc;UAAET,KAAK,EAALA;QAAF,CAAd;MACH;IACJ;;;WAED,6BAAoB;MAChB,KAAKC,OAAL,GAAe,IAAf;IACH;;;WAED,gCAAuB;MACnB,KAAKA,OAAL,GAAe,KAAf;IACH;;;WAED,iBAAQS,KAAR,EAAe;MAAA;;MACX,kBAWI,KAAKzB,KAXT;MAAA,IACI0B,IADJ,eACIA,IADJ;MAAA,IAEIC,QAFJ,eAEIA,QAFJ;MAAA,IAGIC,OAHJ,eAGIA,OAHJ;MAAA,IAIIC,WAJJ,eAIIA,WAJJ;MAAA,IAKIC,cALJ,eAKIA,cALJ;MAAA,IAMIC,cANJ,eAMIA,cANJ;MAAA,wCAOIC,eAPJ;MAAA,IAO4BC,SAP5B,yBAOuBC,GAPvB;MAAA,IAO4CC,SAP5C,yBAOuCC,GAPvC;MAAA,IAQIC,iBARJ,eAQIA,iBARJ;MAAA,IASIC,iBATJ,eASIA,iBATJ;MAAA,IAUIC,eAVJ,eAUIA,eAVJ;;MAaA,IAAIZ,QAAJ,EAAc;QACV;MACH;;MAED,IAAIa,SAAS,GAAGd,IAAI,CAACe,MAArB;MACA,IAAIC,SAAS,GAAGC,IAAI,CAACC,GAAL,EAAhB;;MAEA,IAAI,QAAQnB,KAAZ,EAAmB;QAEfA,KAAK,CAACoB,WAAN,CAAkBC,SAAlB,IAA+B,KAAKC,YAAL,GAAoBC,GAAnD;QACAvB,KAAK,CAACoB,WAAN,CAAkBI,SAAlB,IAA+B,KAAKF,YAAL,GAAoBG,IAAnD;QAGA,KAAKC,MAAL,CAAYC,WAAZ,CAAwB3B,KAAxB;MACH;;MAED,IAAI,CAACe,SAAL,EAAgB;QACZ;MACH;;MAED,KAAKvB,OAAL,GAAe,IAAf;;MAEA,IAAI,eAAe,OAAOW,OAA1B,EAAmC;QAC/BA,OAAO;MACV;;MAED,IAAIyB,UAAU,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,CAAjB;MAEA,KAAKC,SAAL,CAAeC,eAAf,CAA+B,UAACC,CAAD,EAAIC,CAAJ,EAAOC,cAAP,EAAuBC,eAAvB,EAA2C;QACtE,IAAM1C,OAAN,GAAkB,MAAI,CAACD,KAAvB,CAAMC,OAAN;;QAGA,IAAI2C,WAAW,CAACC,KAAZ,IAAqB,CAACzB,iBAA1B,EAA6C;UACzCoB,CAAC,GAAGL,UAAU,CAACW,KAAX,IAAoBN,CAAC,GAAGE,cAAxB,CAAJ;QACH;;QAED,IAAIK,KAAK,GAAGC,IAAI,CAAC9B,GAAL,CAAS,CAAT,EAAYN,cAAc,GAAGO,iBAAjB,IAAsCM,IAAI,CAACC,GAAL,KAAaF,SAAnD,CAAZ,CAAZ;;QACA,IAAIpB,QAAQ,GAAG,MAAI,CAAC6C,aAAL,EAAf;;QAEA,IAAIC,SAAJ;QACA,IAAIlB,IAAI,GAAGQ,CAAC,GACN3B,cAAc,CAACmB,IADV,GAELf,SAFN;;QAIA,IAAIe,IAAI,GAAGjB,SAAX,EAAsB;UAClBmC,SAAS,GAAGjC,SAAZ;QACH,CAFD,MAEO;UACHe,IAAI,GAAGjB,SAAP;UACAmC,SAAS,GAAGnC,SAAZ;QACH;;QAED,IAAIoC,KAAK,GAAGX,CAAC,GAAGE,cAAJ,GAAqBzB,SAAjC;QACA,IAAImC,UAAJ;;QAEA,IAAIjB,UAAU,CAACW,KAAX,GAAmBK,KAAnB,GAA2BpC,SAA/B,EAA0C;UACtCqC,UAAU,GAAGnC,SAAb;QACH,CAFD,MAEO;UACHkC,KAAK,GAAGhB,UAAU,CAACW,KAAX,GAAmB/B,SAA3B;UACAqC,UAAU,GAAGrC,SAAb;QACH;;QAED,IAAIe,GAAG,GAAGW,CAAC,GACL5B,cAAc,CAACiB,GADX,GAEJnB,WAFN;;QAIA,MAAI,CAACL,QAAL,CAAc;UACVD,KAAK,EAAE,IADG;UAEVyC,KAAK,EAAEK,KAAK,GAAGnB,IAFL;UAGVF,GAAG,EAAHA,GAHU;UAIVE,IAAI,EAAJA,IAJU;UAKVkB,SAAS,EAATA,SALU;UAMVE,UAAU,EAAVA,UANU;UAOVhD,QAAQ,EAARA;QAPU,CAAd;;QAUAiD,UAAU,CAAE,YAAM;UACd,IAAI,MAAI,CAACvD,OAAT,EAAkB;YACd,MAAI,CAACwD,iBAAL;;YAEApD,QAAQ,CACHqD,MADL,CACYtD,OADZ,EACqB;cACbuD,QAAQ,EAAErC,iBADG;cAEbsC,OAAO,EAAE,CAFI;cAGbpC,eAAe,EAAfA;YAHa,CADrB,EAMKqC,KANL,CAMW,YAAM;cACT,IAAI,MAAI,CAAC5D,OAAL,IAAgB,UAAU6D,QAAQ,CAACC,EAAvC,EAA2C;gBACvC,YAAgC,MAAI,CAACC,MAAL,IAAe,EAA/C;gBAAA,IAAMC,qBAAN,SAAMA,qBAAN;;gBAEA,IAAI,eAAe,OAAOA,qBAA1B,EAAiD;kBAC7CA,qBAAqB,CAACC,IAAtB,CAA2B,MAAI,CAACF,MAAhC;gBACH;cACJ;YACJ,CAdL;UAeH;QACJ,CApBS,EAoBNd,KApBM,CAAV;MAqBH,CApED;IAqEH;;;WAED,mBAAkC;MAAA;;MAAA,IAA1BlD,KAA0B,uEAAlB,KAAKG,KAAL,CAAWH,KAAO;MAC9B,mBAAqD,KAAKf,KAA1D;MAAA,IAAMkF,MAAN,gBAAMA,MAAN;MAAA,IAAc7C,iBAAd,gBAAcA,iBAAd;MAAA,IAAiCE,eAAjC,gBAAiCA,eAAjC;MACA,IAAMpB,OAAN,GAAkB,KAAKD,KAAvB,CAAMC,OAAN;MAEAC,QAAQ,CACHqD,MADL,CACYtD,OADZ,EACqB;QACbuD,QAAQ,EAAErC,iBADG;QAEbsC,OAAO,EAAE,CAFI;QAGbpC,eAAe,EAAfA;MAHa,CADrB,EAMKqC,KANL,CAMW,YAAM;QACT,MAAI,CAAC3D,OAAL,GAAe,KAAf;;QAEA,IAAI,eAAe,OAAOiE,MAA1B,EAAkC;UAC9BA,MAAM;QACT;;QAED,IAAI,MAAI,CAAClE,OAAT,EAAkB;UACd,MAAI,CAACQ,QAAL,CAAc;YAAET,KAAK,EAALA,KAAF;YAASQ,KAAK,EAAE;UAAhB,CAAd;QACH;MACJ,CAhBL;IAiBH;;;WAED,kBAAS4D,KAAT,EAAgB;MAAA;;MACZ,mBAMI,KAAKnF,KANT;MAAA,IACI0B,IADJ,gBACIA,IADJ;MAAA,IAEI0D,cAFJ,gBAEIA,cAFJ;MAAA,IAGIC,YAHJ,gBAGIA,YAHJ;MAAA,IAIIhD,iBAJJ,gBAIIA,iBAJJ;MAAA,IAKIP,cALJ,gBAKIA,cALJ;MAQA,IAAIf,KAAK,GAAGqE,cAAc,CAAC1D,IAAI,CAACyD,KAAD,CAAL,EAAcA,KAAd,CAA1B;MACA,IAAIlB,KAAK,GAAGC,IAAI,CAAC9B,GAAL,CAAS,CAAT,EAAYN,cAAc,GAAGO,iBAA7B,CAAZ;;MAEA,IAAI,eAAe,OAAOgD,YAA1B,EAAwC;QACpCA,YAAY,CAACtE,KAAD,EAAQoE,KAAR,EAAezD,IAAf,CAAZ;MACH;;MAED6C,UAAU,CAAC;QAAA,OAAM,MAAI,CAACpE,OAAL,CAAaY,KAAb,CAAN;MAAA,CAAD,EAA4BkD,KAA5B,CAAV;IACH;;;WAED,kBAASxC,KAAT,EAAgB;MACZ,IAAMpB,QAAN,GAAmB,KAAKL,KAAxB,CAAMK,QAAN;;MAEA,IAAI,eAAe,OAAOA,QAA1B,EAAoC;QAChCA,QAAQ,CAACoB,KAAD,CAAR;MACH;IACJ;;;WAED,iBAAQ;MACJ,IAAMV,KAAN,GAAgB,KAAKG,KAArB,CAAMH,KAAN;MAEA,OAAOA,KAAP;IACH;;;WAED,yBAAgB;MACZ,IAAMA,KAAN,GAAgB,KAAKG,KAArB,CAAMH,KAAN;MACA,mBAA+B,KAAKf,KAApC;MAAA,IAAM0B,IAAN,gBAAMA,IAAN;MAAA,IAAY0D,cAAZ,gBAAYA,cAAZ;MAEA,OAAO1D,IAAI,CACN4D,SADE,CACQ,UAACC,IAAD,EAAOJ,KAAP;QAAA,OAAiB,QAAQI,IAAR,IAAgBxE,KAAK,KAAKqE,cAAc,CAACG,IAAD,EAAOJ,KAAP,CAAzD;MAAA,CADR,CAAP;IAEH;;;WAED,wBAAe;MACX,IAAMzD,IAAN,GAAe,KAAK1B,KAApB,CAAM0B,IAAN;MAEA,OAAOA,IAAI,CAAC,KAAKyC,aAAL,EAAD,CAAX;IACH;;;WAED,qBAAY;MACR,OAAO,KAAKlD,OAAZ;IACH;;;WAED,oBAAW;MACP,mBAAgC,KAAKjB,KAArC;MAAA,IAAMwF,QAAN,gBAAMA,QAAN;MAAA,IAAgB3D,WAAhB,gBAAgBA,WAAhB;MAEA,OAAOqC,IAAI,CAACuB,IAAL,CAAUD,QAAQ,GAAG,GAAX,GAAiB3D,WAAW,GAAG,CAAzC,CAAP;IACH;;;WAED,4BAAmB;MACf,mBAA0B,KAAK7B,KAA/B;MAAA,IAAM0B,IAAN,gBAAMA,IAAN;MAAA,IAAYc,SAAZ,gBAAYA,SAAZ;MAEA,OAAO0B,IAAI,CAAChC,GAAL,CAASR,IAAI,CAACe,MAAd,EAAsBD,SAAtB,CAAP;IACH;;;WAED,yBAAgB;MACZ,OAAO0B,IAAI,CAAC9B,GAAL,CAAS,KAAKsD,gBAAL,KAA0B,CAAnC,EAAsC,CAAtC,CAAP;IACH;;;WAED,wBAAe;MACX,YAKI,KAAK1F,KAAL,CAAW+C,YAAX,IAA2B,EAL/B;MAAA,sBACIC,GADJ;MAAA,IACIA,GADJ,0BACU,EADV;MAAA,wBAEIqB,KAFJ;MAAA,IAEIA,KAFJ,4BAEY,CAFZ;MAAA,yBAGIsB,MAHJ;MAAA,IAGIA,MAHJ,6BAGa,CAAC,CAHd;MAAA,uBAIIzC,IAJJ;MAAA,IAIIA,IAJJ,2BAIW,CAJX;;MAOA,OAAO;QAAEF,GAAG,EAAHA,GAAF;QAAOqB,KAAK,EAALA,KAAP;QAAcsB,MAAM,EAANA,MAAd;QAAsBzC,IAAI,EAAJA;MAAtB,CAAP;IACH;;;WAED,6BAAoB;MAChB,IAAM5B,QAAN,GAAmB,KAAKJ,KAAxB,CAAMI,QAAN;MACA,mBAAiC,KAAKtB,KAAtC;MAAA,IAAM0B,IAAN,gBAAMA,IAAN;MAAA,IAAYkE,gBAAZ,gBAAYA,gBAAZ;MAEA,IAAIC,MAAM,GAAG,CAAb;MACA,IAAIrD,SAAS,GAAGd,IAAI,CAACe,MAArB;MACA,IAAIqD,QAAQ,GAAG,KAAKA,QAAL,EAAf;MACA,IAAIC,aAAa,GAAG,KAAKA,aAAL,EAApB;MACA,IAAIL,gBAAgB,GAAG,KAAKA,gBAAL,EAAvB;;MAEA,IAAIlD,SAAS,GAAGkD,gBAAhB,EAAkC;QAC9B,IAAI,QAAQE,gBAAZ,EAA8B;UAC1B,QAAQtE,QAAR;YACI,KAAK,CAAC,CAAN;cACI;;YAEJ,KAAK,CAAL;YACA,KAAK,CAAL;cACI;;YAEJ;cACI,IAAIA,QAAQ,IAAIkB,SAAS,GAAGuD,aAA5B,EAA2C;gBACvCF,MAAM,GAAGC,QAAQ,IAAItD,SAAS,GAAGkD,gBAAhB,CAAjB;cACH,CAFD,MAEO;gBACHG,MAAM,GAAGC,QAAQ,IAAIxE,QAAQ,GAAG,CAAf,CAAjB;cACH;;UAbT;QAeH,CAhBD,MAgBO;UACH,IAAI6D,KAAK,GAAG7D,QAAQ,GAAGsE,gBAAvB;;UAEA,IAAIA,gBAAgB,GAAG,CAAvB,EAA0B;YACtBT,KAAK,IAAIO,gBAAT;UACH;;UAEDP,KAAK,GAAGjB,IAAI,CAAC9B,GAAL,CAAS,CAAT,EAAY+C,KAAZ,CAAR;UACAA,KAAK,GAAGjB,IAAI,CAAChC,GAAL,CAASiD,KAAT,EAAgB3C,SAAS,GAAGkD,gBAA5B,CAAR;;UAEA,IAAI,CAACpE,QAAL,EAAe;YACXuE,MAAM,GAAGC,QAAQ,GAAGX,KAApB;UACH;QACJ;MACJ;;MAED,IAAI,KAAKJ,MAAT,EAAiB;QACb,KAAKA,MAAL,CAAYiB,cAAZ,CAA2B;UAAEH,MAAM,EAANA,MAAF;UAAUI,QAAQ,EAAE;QAApB,CAA3B;MACH;IACJ;;;WAED,mBAAUC,IAAV,EAAgBC,GAAhB,EAAqB;MACjB,KAAKD,IAAL,IAAaC,GAAb;IACH;;;WAED,sBAAaZ,IAAb,EAAmBJ,KAAnB,EAA0B;MACtB,IAAMC,cAAN,GAAyB,KAAKpF,KAA9B,CAAMoF,cAAN;MAEA,OAAUD,KAAV,SAAmBC,cAAc,CAACG,IAAD,EAAOJ,KAAP,CAAjC;IACH;;;WAED,oBAAWnF,KAAX,EAAkB;MACd,IAAMe,KAAN,GAAgB,KAAKG,KAArB,CAAMH,KAAN;MACA,mBAMI,KAAKf,KANT;MAAA,IACI0B,IADJ,gBACIA,IADJ;MAAA,IAEI0E,UAFJ,gBAEIA,UAFJ;MAAA,IAGIC,cAHJ,gBAGIA,cAHJ;MAAA,IAIItE,cAJJ,gBAIIA,cAJJ;MAAA,yCAKIrB,eALJ;MAAA,IAKIA,eALJ,sCAKsB,KAAKA,eAL3B;MAQA,IAAIyE,KAAK,GAAG,KAAKhB,aAAL,EAAZ;MACA,IAAImC,KAAJ;;MAEA,IAAI,CAACnB,KAAL,EAAY;QACRmB,KAAK,GAAGD,cAAc,CAAC3E,IAAI,CAACyD,KAAD,CAAL,EAAcA,KAAd,CAAtB;MACH;;MAED,IAAI,QAAQmB,KAAZ,EAAmB;QACfA,KAAK,GAAGvF,KAAR;MACH;;MAED,IAAI,eAAe,OAAOqF,UAA1B,EAAsC;QAClC,OAAOA,UAAU,iCAAMpG,KAAN;UAAasG,KAAK,EAALA,KAAb;UAAoBvF,KAAK,EAALA,KAApB;UAA2BL,eAAe,EAAfA;QAA3B,GAAjB;MACH;;MAED4F,KAAK,GAAG,QAAQA,KAAR,IAAiB,aAAa,OAAOA,KAArC,GACJA,KADI,GAEJC,MAAM,CAACD,KAAD,CAFV;MAIA,OACI,KAAC,SAAD;QACI,KAAK,EAAE;UAACE,eAAe,EAAE,aAAlB;UAAiCC,YAAY,EAAE;QAA/C,CADX;QAEI,KAAK,EAAC;MAFV,GAGQzG,KAHR;QAII,KAAK,EAAEsG,KAJX;QAKI,QAAQ,EAAE,KALd;QAMI,YAAY,EAAEI,SANlB;QAOI,eAAe,EAAEhG;MAPrB,GADJ;IAWH;;;WAED,wBAAe;MACX,mBAOI,KAAKV,KAPT;MAAA,IACI2G,SADJ,gBACIA,SADJ;MAAA,yCAEIC,WAFJ;MAAA,IAEIA,WAFJ,sCAEkBD,SAFlB;MAAA,IAGIE,aAHJ,gBAGIA,aAHJ;MAAA,IAII/E,cAJJ,gBAIIA,cAJJ;MAAA,IAKIgF,cALJ,gBAKIA,cALJ;MAAA,IAMIC,gBANJ,gBAMIA,gBANJ;;MASA,yBAA4B,KAAKhE,YAAL,EAA5B;MAAA,IAAM4C,MAAN,sBAAMA,MAAN;MAAA,IAAiBqB,MAAjB;;MACA,IAAIC,KAAK,mCACFD,MADE;QAGLE,MAAM,EAAE,KAAKpB,QAAL,KAAkBH,MAHrB;QAILwB,QAAQ,EAAE;MAJL,EAAT;;MAOA,OACI,KAAC,MAAD;QACI,KAAK,EAAEF,KADX;QAEI,WAAW,EAAEL,WAFjB;QAGI,cAAc,EAAE9E,cAHpB;QAII,aAAa,EAAE+E,aAJnB;QAKI,cAAc,EAAEC,cALpB;QAMI,gBAAgB,EAAEC,gBANtB;QAOI,GAAG,EAAE,KAAKzG;MAPd,EADJ;IAWH;;;WAED,2BAAkB;MACd,IAAiBkG,eAAjB,GAAqC,KAAKxG,KAA1C,CAAM2G,SAAN;MACA,IAAIS,aAAa,GAAG;QAAEZ,eAAe,EAAfA;MAAF,CAApB;MAEA,OACI,KAAC,IAAD;QAAM,KAAK,EAAE1G,MAAM,CAACuH,SAApB;QAAA,UACI,KAAC,IAAD;UAAM,KAAK,EAAEvH,MAAM,CAACwH,iBAApB;UAAA,UACI,KAAC,IAAD;YAAM,KAAK,EAAE,CAACxH,MAAM,CAACyH,QAAR,EAAkBH,aAAlB;UAAb;QADJ;MADJ,EADJ;IAOH;;;WAED,2BAA4B;MAAA,IAAf7B,IAAe,SAAfA,IAAe;MAAA,IAATJ,KAAS,SAATA,KAAS;;MACxB,IAAI,QAAQI,IAAZ,EAAkB;QACd,OAAO,IAAP;MACH;;MAED,kBAA0C,KAAKrE,KAA/C;MAAA,IAAMI,QAAN,eAAMA,QAAN;MAAA,IAAgB8C,SAAhB,eAAgBA,SAAhB;MAAA,IAA2BE,UAA3B,eAA2BA,UAA3B;MAEA,oBAcI,KAAKtE,KAdT;MAAA,IACIoF,cADJ,iBACIA,cADJ;MAAA,IAEIiB,cAFJ,iBAEIA,cAFJ;MAAA,IAGImB,cAHJ,iBAGIA,cAHJ;MAAA,IAIIC,SAJJ,iBAIIA,SAJJ;MAAA,IAKIC,SALJ,iBAKIA,SALJ;MAAA,IAMIf,SANJ,iBAMIA,SANJ;MAAA,0CAOIgB,iBAPJ;MAAA,IAOIA,iBAPJ,sCAOwBF,SAPxB;MAAA,0CAQIG,iBARJ;MAAA,IAQIA,iBARJ,sCAQwBjB,SARxB;MAAA,IASInB,QATJ,iBASIA,QATJ;MAAA,IAUIqC,aAVJ,iBAUIA,aAVJ;MAAA,IAWIhB,aAXJ,iBAWIA,aAXJ;MAAA,IAYI/E,cAZJ,iBAYIA,cAZJ;MAAA,IAaIgG,YAbJ,iBAaIA,YAbJ;MAgBA,IAAI9H,KAAK,GAAGwH,cAAc,CAACjC,IAAD,EAAOJ,KAAP,CAA1B;;MAEA,aACMnF,KAAK;QAEH8B,cAAc,EAAdA,cAFG;QAGH+E,aAAa,EAAbA,aAHG;QAIHD,WAAW,EAAED,SAJV;QAMHoB,UAAU,EAAEpB,SANT;QAOHmB,YAAY,EAAZA;MAPG,GASA9H,KATA;QAWHC,OAAO,EAAE,KAAKG;MAXX,EADX;MAAA,IAAM6G,KAAN,UAAMA,KAAN;MAAA,IAAatF,QAAb,UAAaA,QAAb;;MAeA,IAAIZ,KAAK,GAAGqE,cAAc,CAACG,IAAD,EAAOJ,KAAP,CAA1B;MACA,IAAI6C,KAAK,GAAG3B,cAAc,CAACd,IAAD,EAAOJ,KAAP,CAA1B;MAEA,IAAImB,KAAK,GAAG,QAAQ0B,KAAR,GACRjH,KADQ,GAERiH,KAFJ;MAIA,IAAIC,KAAK,GAAGtG,QAAQ,GAChBiG,iBADgB,GAEhB,CAACtG,QAAD,GACI6D,KAAK,KAAK7D,QAAV,GACIqG,iBADJ,GAEID,SAHR,GAIIC,iBANR;MAQA,IAAIO,SAAS,GAAG;QAAED,KAAK,EAALA,KAAF;QAASzC,QAAQ,EAARA;MAAT,CAAhB;MAEAxF,KAAK,CAACiH,KAAN,GAAc,CACVA,KADU,EAEV;QACIC,MAAM,EAAE,KAAKpB,QAAL,EADZ;QAEIqC,WAAW,EAAE/D,SAFjB;QAGIgE,YAAY,EAAE9D;MAHlB,CAFU,CAAd;MASA,OACI,KAAC,YAAD;QAAc,KAAK,EAAEa;MAArB,GAAgCnF,KAAhC;QAAA,UACI,KAAC,IAAD;UAAM,KAAK,EAAE,CAACF,MAAM,CAACyF,IAAR,EAAcsC,aAAd,EAA6BK,SAA7B,CAAb;UAAsD,aAAa,EAAE,CAArE;UAAA,UACK5B;QADL;MADJ,GADJ;IAOH;;;WAED,kBAAS;MACL,oBAuBI,KAAKtG,KAvBT;MAAA,IACIoG,UADJ,iBACIA,UADJ;MAAA,IAEI1F,eAFJ,iBAEIA,eAFJ;MAAA,IAGI2H,cAHJ,iBAGIA,cAHJ;MAAA,IAIIC,mBAJJ,iBAIIA,mBAJJ;MAAA,IAKkBC,qBALlB,iBAKIC,YALJ;MAAA,IAMiBC,oBANjB,iBAMIC,WANJ;MAAA,IAQI3F,YARJ,iBAQIA,YARJ;MAAA,IASI8D,aATJ,iBASIA,aATJ;MAAA,IAUIC,cAVJ,iBAUIA,cAVJ;MAAA,IAWIC,gBAXJ,iBAWIA,gBAXJ;MAAA,IAaI4B,OAbJ,iBAaIA,OAbJ;MAAA,IAcIC,oBAdJ,iBAcIA,oBAdJ;MAAA,IAeIC,MAfJ,iBAeIA,MAfJ;MAAA,IAgBIC,QAhBJ,iBAgBIA,QAhBJ;MAAA,IAiBIC,UAjBJ,iBAiBIA,UAjBJ;MAAA,IAkBIC,kBAlBJ,iBAkBIA,kBAlBJ;MAAA,IAoBIC,qBApBJ,iBAoBIA,qBApBJ;MAAA,IAsBOjJ,KAtBP;;MAyBA,IACI0B,IADJ,GAKI1B,KALJ,CACI0B,IADJ;MAAA,IAEIC,QAFJ,GAKI3B,KALJ,CAEI2B,QAFJ;MAAA,IAGIE,WAHJ,GAKI7B,KALJ,CAGI6B,WAHJ;MAAA,IAII+D,gBAJJ,GAKI5F,KALJ,CAII4F,gBAJJ;MAOA,mBAAqD,KAAK1E,KAA1D;MAAA,IAAMgC,IAAN,gBAAMA,IAAN;MAAA,IAAYF,GAAZ,gBAAYA,GAAZ;MAAA,IAAiBgB,KAAjB,gBAAiBA,KAAjB;MAAA,IAAwB7C,OAAxB,gBAAwBA,OAAxB;MAAA,IAAiCG,QAAjC,gBAAiCA,QAAjC;MAAA,IAA2CC,KAA3C,gBAA2CA,KAA3C;MAEA,IAAIiB,SAAS,GAAGd,IAAI,CAACe,MAArB;MACA,IAAIiD,gBAAgB,GAAG,KAAKA,gBAAL,EAAvB;MACA,IAAIK,aAAa,GAAG,KAAKA,aAAL,EAApB;MACA,IAAID,QAAQ,GAAG,KAAKA,QAAL,EAAf;MAEA,IAAIoB,MAAM,GAAG,IAAIrF,WAAJ,GAAkBiE,QAAQ,GAAGJ,gBAA1C;MACA,IAAIwD,UAAU,GAAG,CAACrH,WAAlB;;MAEA,IAAI,QAAQ+D,gBAAZ,EAA8B;QAC1B,QAAQtE,QAAR;UACI,KAAK,CAAC,CAAN;YACI4H,UAAU,IAAI,MAAM1G,SAAN,GAAkB,CAAlB,GAAsBsD,QAApC;YACA;;UAEJ,KAAK,CAAL;YACI;;UAEJ;YACI,IAAIxE,QAAQ,IAAIkB,SAAS,GAAGuD,aAA5B,EAA2C;cACvCmD,UAAU,IAAIpD,QAAQ,IAAIJ,gBAAgB,IAAIlD,SAAS,GAAGlB,QAAhB,CAApB,CAAtB;YACH,CAFD,MAEO;cACH4H,UAAU,IAAIpD,QAAd;YACH;;QAbT;MAeH,CAhBD,MAgBO;QACH,IAAIF,gBAAgB,GAAG,CAAvB,EAA0B;UACtBsD,UAAU,IAAIpD,QAAQ,IAAIJ,gBAAgB,GAAGE,gBAAvB,CAAtB;QACH,CAFD,MAEO;UACHsD,UAAU,IAAIpD,QAAQ,GAAGF,gBAAzB;QACH;MACJ;;MAED,IAAI4C,YAAY,GAAG;QAAErH,OAAO,EAAPA;MAAF,CAAnB;MAEA,IAAIuH,WAAW,GAAG;QACd1E,KAAK,EAALA,KADc;QAEdkD,MAAM,EAANA,MAFc;QAGdlE,GAAG,EAAHA,GAHc;QAIdE,IAAI,EAAJA,IAJc;QAKdiG,SAAS,EAAE,CAAC;UAAED,UAAU,EAAVA;QAAF,CAAD;MALG,CAAlB;MAQA,IAAIE,cAAc,GAAG;QACjBzH,QAAQ,EAARA,QADiB;QAEjBgH,OAAO,EAAPA,OAFiB;QAGjBC,oBAAoB,EAApBA,oBAHiB;QAIjB3I,OAAO,EAAE,KAAKA,OAJG;QAKjB4I,MAAM,EAANA,MALiB;QAMjBC,QAAQ,EAARA,QANiB;QAOjBC,UAAU,EAAVA,UAPiB;QAQjBC,kBAAkB,EAAlBA;MARiB,CAArB;MAWA,OACI,MAAC,IAAD;QAAM,QAAQ,EAAE,KAAK3I,QAArB;QAA+B,GAAG,EAAE,KAAKG,kBAAzC;QAA6D,KAAK,EAAE6H,cAApE;QAAA,WACI,KAAC,wBAAD,kCAA8Be,cAA9B;UAAA,UACI,MAAC,IAAD;YAAM,aAAa,EAAC,UAApB;YAAA,WACK,KAAKhD,UAAL,CAAgBpG,KAAhB,CADL,EAEK,KAAKqJ,YAAL,EAFL;UAAA;QADJ,GADJ,EAQI,KAAC,KAAD;UACI,OAAO,EAAE9H,KADb;UAEI,WAAW,EAAE,IAFjB;UAGI,cAAc,EAAE,KAAKV,IAHzB;UAII,qBAAqB,EAAEoI,qBAJ3B;UAAA,UAMI,KAAC,QAAD,CAAU,IAAV;YACI,KAAK,EAAE,CAACnJ,MAAM,CAACwJ,OAAR,EAAiBd,YAAjB,EAA+BD,qBAA/B,CADX;YAEI,yBAAyB,EAAE;cAAA,OAAM,IAAN;YAAA,CAF/B;YAGI,kBAAkB,EAAE,KAAK1H,IAH7B;YAAA,UAKI,KAAC,IAAD;cACI,KAAK,EAAE,CAACf,MAAM,CAACyJ,MAAR,EAAgBb,WAAhB,EAA6BD,oBAA7B,CADX;cAEI,yBAAyB,EAAE;gBAAA,OAAM,IAAN;cAAA,CAF/B;cAAA,UAII,KAAC,QAAD;gBACI,GAAG,EAAE,KAAKhI,eADd;gBAEI,IAAI,EAAEiB,IAFV;gBAGI,KAAK,EAAE5B,MAAM,CAACiF,MAHlB;gBAII,UAAU,EAAE,KAAKpE,UAJrB;gBAKI,YAAY,EAAE,KAAKC,YALvB;gBAMI,aAAa,EAAE8E,gBAAgB,GAAGlD,SANtC;gBAOI,qBAAqB,EAAE1C,MAAM,CAAC0J;cAPlC;YAJJ;UALJ;QANJ,EARJ;MAAA,EADJ;IAsCH;;;;EAxuBiC/J,a;;AAAjBM,Q,CACV0J,Y,GAAe;EAClBd,OAAO,EAAE;IAAE3F,GAAG,EAAE,CAAP;IAAUqB,KAAK,EAAE,CAAjB;IAAoBsB,MAAM,EAAE,CAA5B;IAA+BzC,IAAI,EAAE;EAArC,CADS;EAGlBvB,QAAQ,EAAE,KAHQ;EAKlBD,IAAI,EAAE,EALY;EAOlB0D,cAAc,EAAE;IAAA,gFAAa,EAAb;IAAA,IAAGrE,KAAH,SAAGA,KAAH;;IAAA,IAAiBoE,KAAjB;IAAA,OAA2BpE,KAA3B;EAAA,CAPE;EAQlBsF,cAAc,EAAE;IAAA,gFAAa,EAAb;IAAA,IAAG2B,KAAH,SAAGA,KAAH;;IAAA,IAAiB7C,KAAjB;IAAA,OAA2B6C,KAA3B;EAAA,CARE;EASlBR,cAAc,EAAE;IAAA,OAAM,IAAN;EAAA,CATE;EAWlBlF,iBAAiB,EAAE,KAXD;EAalBP,cAAc,EAAE;IACZiB,GAAG,EAAE,EADO;IAEZE,IAAI,EAAE;EAFM,CAbE;EAkBlBlB,eAAe,EAAE;IACbE,GAAG,EAAE,CADQ;IAEbE,GAAG,EAAE;EAFQ,CAlBC;EAuBlB0E,cAAc,EAAE,KAvBE;EAwBlBC,gBAAgB,EAAE,IAxBA;EA0BlBhE,YAAY,EAAE;IACVC,GAAG,EAAE,EADK;IAEVqB,KAAK,EAAE,CAFG;IAGVsB,MAAM,EAAE,CAAC,CAHC;IAIVzC,IAAI,EAAE;EAJI,CA1BI;EAiClB2D,aAAa,EAAE,IAjCG;EAkClBiB,YAAY,EAAE,IAlCI;EAoClBhG,cAAc,EAAE,GApCE;EAqClBO,iBAAiB,EAAE,GArCD;EAuClBmD,QAAQ,EAAE,EAvCQ;EAyClBiC,SAAS,EAAE,oBAzCO;EA0ClBC,SAAS,EAAE,oBA1CO;EA2ClBf,SAAS,EAAE,oBA3CO;EA6ClBnE,SAAS,EAAE,CA7CO;EA8ClBX,WAAW,EAAE,CA9CK;EAgDlBoH,qBAAqB,EAAE,CACnB,UADmB,EAEnB,sBAFmB,EAGnB,WAHmB,EAInB,gBAJmB,EAKnB,iBALmB,CAhDL;EAwDlB1G,eAAe,EAAE;AAxDC,C;AADLxC,Q,CA4DV2J,S,mCACAC,wBAAwB,CAACD,S;EAE5B/H,QAAQ,EAAEpC,SAAS,CAACqK,I;EAEpB7I,KAAK,EAAExB,SAAS,CAACsK,SAAV,CAAoB,CACvBtK,SAAS,CAACuK,MADa,EAEvBvK,SAAS,CAACwK,MAFa,CAApB,C;EAKPrI,IAAI,EAAEnC,SAAS,CAACyK,OAAV,CAAkBzK,SAAS,CAAC0K,MAA5B,C;EAEN7E,cAAc,EAAE7F,SAAS,CAAC2K,I;EAC1B7D,cAAc,EAAE9G,SAAS,CAAC2K,I;EAC1B1C,cAAc,EAAEjI,SAAS,CAAC2K,I;EAE1B5H,iBAAiB,EAAE/C,SAAS,CAACqK,I;EAE7B7H,cAAc,EAAExC,SAAS,CAAC4K,KAAV,CAAgB;IAC5BnH,GAAG,EAAEzD,SAAS,CAACwK,MAAV,CAAiBK,UADM;IAE5BlH,IAAI,EAAE3D,SAAS,CAACwK,MAAV,CAAiBK;EAFK,CAAhB,C;EAKhBpI,eAAe,EAAEzC,SAAS,CAAC4K,KAAV,CAAgB;IAC7BjI,GAAG,EAAE3C,SAAS,CAACwK,MAAV,CAAiBK,UADO;IAE7BhI,GAAG,EAAE7C,SAAS,CAACwK,MAAV,CAAiBK;EAFO,CAAhB,C;EAKjBxE,gBAAgB,EAAErG,SAAS,CAACwK,M;EAE5BnD,WAAW,EAAErH,SAAS,CAACuK,M;EACvBhD,cAAc,EAAEvH,SAAS,CAACqK,I;EAC1B7C,gBAAgB,EAAExH,SAAS,CAACqK,I;EAE5B7G,YAAY,EAAExD,SAAS,CAAC4K,KAAV,CAAgB;IAC1BnH,GAAG,EAAEzD,SAAS,CAACwK,MADW;IAE1B1F,KAAK,EAAE9E,SAAS,CAACwK,MAFS;IAG1BpE,MAAM,EAAEpG,SAAS,CAACwK,MAHQ;IAI1B7G,IAAI,EAAE3D,SAAS,CAACwK;EAJU,CAAhB,C;EAOdlD,aAAa,EAAEtH,SAAS,CAACwK,M;EACzBjC,YAAY,EAAEvI,SAAS,CAACwK,M;EAExBjI,cAAc,EAAEvC,SAAS,CAACwK,M;EAC1B1H,iBAAiB,EAAE9C,SAAS,CAACwK,M;EAE7BvE,QAAQ,EAAEjG,SAAS,CAACwK,M;EAEpBtC,SAAS,EAAElI,SAAS,CAACuK,M;EACrBpC,SAAS,EAAEnI,SAAS,CAACuK,M;EACrBnC,iBAAiB,EAAEpI,SAAS,CAACuK,M;EAC7BlC,iBAAiB,EAAErI,SAAS,CAACuK,M;EAC7BnD,SAAS,EAAEpH,SAAS,CAACuK,M;EAErBjC,aAAa,EAAEwC,IAAI,CAACX,SAAL,CAAezC,K;EAE9BzE,SAAS,EAAEjD,SAAS,CAACwK,M;EACrBlI,WAAW,EAAEtC,SAAS,CAACwK,M;EAEvB1J,QAAQ,EAAEd,SAAS,CAAC2K,I;EACpBtI,OAAO,EAAErC,SAAS,CAAC2K,I;EACnBhF,MAAM,EAAE3F,SAAS,CAAC2K,I;EAClB7E,YAAY,EAAE9F,SAAS,CAAC2K,I;EAExB9D,UAAU,EAAE7G,SAAS,CAAC2K,I;EACtBxJ,eAAe,EAAEnB,SAAS,CAAC2K,I;EAE3B5B,mBAAmB,EAAE,CAAC5I,aAAa,IAAI4K,IAAI,CAACZ,SAAvB,EAAkCzC,K;EACvDoB,cAAc,EAAE,CAAC3I,aAAa,IAAI4K,IAAI,CAACZ,SAAvB,EAAkCzC,K;EAClDuB,YAAY,EAAE,CAAC9I,aAAa,IAAI4K,IAAI,CAACZ,SAAvB,EAAkCzC,K;EAChDyB,WAAW,EAAE,CAAChJ,aAAa,IAAI4K,IAAI,CAACZ,SAAvB,EAAkCzC,K;EAE/CgC,qBAAqB,EAAE1J,SAAS,CAACyK,OAAV,CAAkBzK,SAAS,CAACuK,MAA5B,C;EAEvBvH,eAAe,EAAEhD,SAAS,CAACqK;;SAvId7J,Q"},"metadata":{},"sourceType":"module"}