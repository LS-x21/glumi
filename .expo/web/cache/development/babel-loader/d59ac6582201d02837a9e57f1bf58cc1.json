{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { bloodSugarGraph } from \"../style/style\";\nimport Svg, { Path } from 'react-native-svg';\nimport { scaleLinear, scaleTime, line } from 'd3';\nimport { Data } from \"./Data.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default (function () {\n  var sugarData = [95, 99, 112];\n  var yHideRatio = 0.8;\n  var defaultMax = 250;\n  var opacity = 1;\n  var vw = Dimensions.get(\"window\").width;\n  var width = 500;\n  var height = width;\n  console.log(\"hi\");\n  var key = Array.from(Data.keys())[0];\n  var value = Data.get(key);\n\n  var makeGraph = function makeGraph(d) {\n    var min = Math.min.apply(Math, _toConsumableArray(d.values()));\n    var max = Math.min.apply(Math, _toConsumableArray(d.values()));\n    var yAxis = scaleLinear().domain([min, max]).range([height, 35]);\n    var xAxis = scaleTime().domain([new Date(2000, 2, 1), new Date(2000, 2, 15)]).range([10, width - 10]);\n    var a = [];\n\n    for (var i = 0; i < d.size; i++) {\n      a.push([new Date(Array.from(d.keys())[i])]);\n    }\n  };\n\n  var graph = makeGraph(Data);\n  return _jsx(Text, {\n    children: \"hello world\"\n  });\n});","map":{"version":3,"names":["bloodSugarGraph","Svg","Path","scaleLinear","scaleTime","line","Data","sugarData","yHideRatio","defaultMax","opacity","vw","Dimensions","get","width","height","console","log","key","Array","from","keys","value","makeGraph","d","min","Math","values","max","yAxis","domain","range","xAxis","Date","a","i","size","push","graph"],"sources":["C:/Users/thund/OneDrive/Documents/HTML/breathanaylzer/components/BloodSugarGraph.js"],"sourcesContent":["import { Dimensions, Text } from 'react-native';\r\nimport { bloodSugarGraph } from '../style/style';\r\nimport Svg, { Path } from 'react-native-svg';\r\nimport { scaleLinear, scaleTime, line } from 'd3';\r\nimport { Data } from './Data.js';\r\n\r\n// import { LineChart, BarChart, PieChart, ProgressChart, ContributionGraph, StackedBarChart } from \"react-native-chart-kit\";\r\n\r\n\r\nexport default () => {\r\n  const sugarData = [95, 99, 112];\r\n  let yHideRatio = 0.8;\r\n  let defaultMax = 250;\r\n  let opacity = 1;\r\n  const vw = Dimensions.get(\"window\").width;\r\n\r\n  // const svg = select('svg');\r\n\r\n\r\n  // useEffect(() => {\r\n  //   const width = 500;\r\n  //   const height = 500;\r\n  // })\r\n\r\n  // csv(rawData).then(d => {\r\n  //   d.forEach(i => {\r\n  //     i.value = +i.value;\r\n  //   });\r\n  //   graph(d);\r\n  // });\r\n\r\n  // const graph = d => {\r\n  //   const margin = { top: 10, left: 50, right: 50, bottom: 50 }\r\n  //   const min = d3.min(d, i => d.value);\r\n  //   const max = d3.max(d, i => d.value);\r\n\r\n\r\n  //   const svg = d3\r\n  //     .select('View')\r\n  //     .append(\"Svg\")\r\n  //     .attr('width', width)\r\n  //     .attr('height', height)\r\n  // }\r\n  // const xScale = scaleLinear()\r\n  //   .domain([0, max(d, i => i.value)])\r\n  //   .range(0, width);\r\n  // const yScale = scaleBand()\r\n  //   .domain(d, i => d.date)\r\n  //   .range([0, height]);\r\n\r\n  const width = 500;\r\n  const height = width;\r\n  console.log(\"hi\");\r\n\r\n  let key = Array.from(Data.keys())[0];\r\n  let value = Data.get(key);\r\n\r\n  const makeGraph = d => {\r\n    const min = Math.min(...d.values());\r\n    const max = Math.min(...d.values());\r\n\r\n    const yAxis = scaleLinear()\r\n      .domain([min, max])\r\n      .range([height, 35]);\r\n    const xAxis = scaleTime()\r\n      .domain([new Date(2000, 2, 1), new Date(2000, 2, 15)])\r\n      .range([10, width - 10]);\r\n\r\n\r\n    // const points = () => {\r\n    // let a = [];\r\n    // d.forEach(j => {\r\n    //   a.push([xAxis(new d(j.date)), yAxis(y.value)])\r\n    // });\r\n    let a = [];\r\n    for (let i = 0; i < d.size; i++) {\r\n      a.push([new Date(Array.from(d.keys())[i]), ]);\r\n    }\r\n    // d.forEach(j => {\r\n    // console.log(Array.from(d.keys())[0])\r\n\r\n    // });\r\n    // console.log(new Date(key));\r\n    // return a;\r\n    // }\r\n\r\n\r\n\r\n    // const line = line()\r\n    //   .x(i => xAxis(new d(i.date)))\r\n    //   .y(i => yAxis(y.value));\r\n  }\r\n  const graph = makeGraph(Data);\r\n\r\n  return (\r\n    <Text>hello world</Text>\r\n  );\r\n  // const renderData = data => {\r\n  //   const xScale = scaleLinear().domain([0, max(data, i => i.value)]).range(0, width); //the 10 is padding\r\n  //   const yScale = scaleBand().domain(data, i => data.date).range([0, height]); //the 35 is padding\r\n\r\n  //   svg.selectAll('rect').data(data).enter()\r\n  //     .append('rect')\r\n  //     .attr('y', i => Scale(i.date))\r\n  //     .attr('width', i => xScale(i.value))\r\n  //     .attr('height', yScale.bandwidth())\r\n  // }\r\n\r\n  // const data = {\r\n  //   labels: [\"sun\", \"mon\", \"tue\"],\r\n  //   datasets: [\r\n  //     {\r\n  //       data: [\r\n  //         Math.random() * 100,\r\n  //         Math.random() * 100,\r\n  //         Math.random() * 100\r\n  //       ]\r\n  //     }\r\n  //   ],\r\n  // };\r\n\r\n  // const chartConfig = {\r\n  //   backgroundColor: `rgba(255, 255, 255, ${opacity}})`,\r\n  //   backgroundGradientFrom: `rgba(255, 255, 255, ${opacity})`,\r\n  //   backgroundGradientTo: `rgba(255, 255, 255, ${opacity})`,\r\n  //   decimalPlaces: 2,\r\n  //   color: (opacity = .9) => `rgba(0, 0, 0, ${opacity})`,\r\n  //   labelColor: (opacity = .9) => `rgba(0, 0, 0, ${opacity})`,\r\n  //   style: {\r\n  //     borderRadius: 12,\r\n  //   },\r\n\r\n  // }\r\n\r\n  // return (\r\n  //   <LineChart\r\n  //     style={\r\n  //       {\r\n  //         shadowColor: \"#000\",\r\n  //         shadowOffset: { width: vw * .01, height: vw * .01 },\r\n  //         shadowOpacity: .5,\r\n  //         shadowRadius: vw * .1,\r\n  //         marginVertical: 8,\r\n  //         borderRadius: 10,\r\n  //         width: vw * .8,\r\n  //       }\r\n  //     }\r\n  //     withOuterLines\r\n  //     data={data}\r\n  //     width={vw * .8} // from react-native\r\n  //     height={vw * .8}\r\n  //     yAxisInterval={1} // optional, defaults to 1\r\n  //     chartConfig={chartConfig}\r\n  //     yLabelsOffset={vw * .05}\r\n  //     xLabelsOffset={vw * .02}\r\n  //   />\r\n  // );\r\n}"],"mappings":";;;AACA,SAASA,eAAT;AACA,OAAOC,GAAP,IAAcC,IAAd,QAA0B,kBAA1B;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,IAAjC,QAA6C,IAA7C;AACA,SAASC,IAAT;;AAKA,gBAAe,YAAM;EACnB,IAAMC,SAAS,GAAG,CAAC,EAAD,EAAK,EAAL,EAAS,GAAT,CAAlB;EACA,IAAIC,UAAU,GAAG,GAAjB;EACA,IAAIC,UAAU,GAAG,GAAjB;EACA,IAAIC,OAAO,GAAG,CAAd;EACA,IAAMC,EAAE,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC,KAApC;EAoCA,IAAMA,KAAK,GAAG,GAAd;EACA,IAAMC,MAAM,GAAGD,KAAf;EACAE,OAAO,CAACC,GAAR,CAAY,IAAZ;EAEA,IAAIC,GAAG,GAAGC,KAAK,CAACC,IAAN,CAAWd,IAAI,CAACe,IAAL,EAAX,EAAwB,CAAxB,CAAV;EACA,IAAIC,KAAK,GAAGhB,IAAI,CAACO,GAAL,CAASK,GAAT,CAAZ;;EAEA,IAAMK,SAAS,GAAG,SAAZA,SAAY,CAAAC,CAAC,EAAI;IACrB,IAAMC,GAAG,GAAGC,IAAI,CAACD,GAAL,OAAAC,IAAI,qBAAQF,CAAC,CAACG,MAAF,EAAR,EAAhB;IACA,IAAMC,GAAG,GAAGF,IAAI,CAACD,GAAL,OAAAC,IAAI,qBAAQF,CAAC,CAACG,MAAF,EAAR,EAAhB;IAEA,IAAME,KAAK,GAAG1B,WAAW,GACtB2B,MADW,CACJ,CAACL,GAAD,EAAMG,GAAN,CADI,EAEXG,KAFW,CAEL,CAAChB,MAAD,EAAS,EAAT,CAFK,CAAd;IAGA,IAAMiB,KAAK,GAAG5B,SAAS,GACpB0B,MADW,CACJ,CAAC,IAAIG,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,CAAD,EAAuB,IAAIA,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB,CAAvB,CADI,EAEXF,KAFW,CAEL,CAAC,EAAD,EAAKjB,KAAK,GAAG,EAAb,CAFK,CAAd;IAUA,IAAIoB,CAAC,GAAG,EAAR;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,CAAC,CAACY,IAAtB,EAA4BD,CAAC,EAA7B,EAAiC;MAC/BD,CAAC,CAACG,IAAF,CAAO,CAAC,IAAIJ,IAAJ,CAASd,KAAK,CAACC,IAAN,CAAWI,CAAC,CAACH,IAAF,EAAX,EAAqBc,CAArB,CAAT,CAAD,CAAP;IACD;EAcF,CAlCD;;EAmCA,IAAMG,KAAK,GAAGf,SAAS,CAACjB,IAAD,CAAvB;EAEA,OACE,KAAC,IAAD;IAAA;EAAA,EADF;AA+DD,CApJD"},"metadata":{},"sourceType":"module"}