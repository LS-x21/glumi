{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport RemoteLogging from \"./RemoteLogging\";\nexport function createRemoteConsole(originalConsole) {\n  var groupDepth = 0;\n  var enhancedConsole = Object.create(originalConsole);\n\n  _defineConsoleLogMethod('debug', 'info');\n\n  _defineConsoleLogMethod('log', 'info');\n\n  _defineConsoleLogMethod('info', 'info');\n\n  _defineConsoleLogMethod('warn', 'warn');\n\n  _defineConsoleLogMethod('error', 'error');\n\n  enhancedConsole.assert = function assert(condition) {\n    for (var _len = arguments.length, data = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      data[_key - 1] = arguments[_key];\n    }\n\n    if (originalConsole.assert) {\n      originalConsole.assert.apply(originalConsole, [!!condition].concat(data));\n    }\n\n    if (condition) {\n      return;\n    }\n\n    var assertionMessage = 'Assertion failed';\n\n    if (!data.length) {\n      data.push(assertionMessage);\n    } else {\n      if (typeof data[0] !== 'string') {\n        data.unshift(assertionMessage);\n      } else {\n        data[0] = assertionMessage + \": \" + data[0];\n      }\n    }\n\n    _enqueueRemoteLog('error', {}, data);\n  };\n\n  enhancedConsole.group = function group() {\n    for (var _len2 = arguments.length, data = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      data[_key2] = arguments[_key2];\n    }\n\n    if (originalConsole.group) {\n      originalConsole.group.apply(originalConsole, data);\n    }\n\n    _enqueueRemoteLog('info', {}, data);\n\n    groupDepth++;\n  };\n\n  enhancedConsole.groupCollapsed = function groupCollapsed() {\n    for (var _len3 = arguments.length, data = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      data[_key3] = arguments[_key3];\n    }\n\n    if (originalConsole.groupCollapsed) {\n      originalConsole.groupCollapsed.apply(originalConsole, data);\n    }\n\n    _enqueueRemoteLog('info', {\n      groupCollapsed: true\n    }, data);\n\n    groupDepth++;\n  };\n\n  enhancedConsole.groupEnd = function groupEnd() {\n    if (originalConsole.groupEnd) {\n      originalConsole.groupEnd();\n    }\n\n    if (groupDepth > 0) {\n      groupDepth--;\n    }\n\n    _enqueueRemoteLog('info', {\n      shouldHide: true\n    }, []);\n  };\n\n  function _defineConsoleLogMethod(name, level) {\n    enhancedConsole[name] = function __expoConsoleLog() {\n      var originalMethod = originalConsole[name];\n\n      for (var _len4 = arguments.length, data = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        data[_key4] = arguments[_key4];\n      }\n\n      if (typeof originalMethod === 'function') {\n        originalMethod.apply(originalConsole, data);\n      }\n\n      _enqueueRemoteLog(level, {}, data);\n    };\n  }\n\n  function _enqueueRemoteLog(level, additionalFields, data) {\n    RemoteLogging.enqueueRemoteLogAsync(level, _objectSpread({\n      groupDepth: groupDepth\n    }, additionalFields), data).catch(function (error) {\n      originalConsole.error(\"There was a problem sending log messages to your development environment\", error);\n    });\n  }\n\n  return enhancedConsole;\n}","map":{"version":3,"sources":["../../src/logs/RemoteConsole.ts"],"names":[],"mappings":"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","sourcesContent":["import RemoteLogging, { LogEntryFields, LogLevel } from './RemoteLogging';\n\n/**\n * Creates a console object that delegates calls to the specified underlying console and also sends\n * the messages to the development environment over a remote connection.\n */\nexport function createRemoteConsole(originalConsole: Console): Console {\n  let groupDepth = 0;\n\n  const enhancedConsole: typeof originalConsole = Object.create(originalConsole);\n\n  // https://console.spec.whatwg.org/#debug\n  // Don't use a level below \"info\" because \"debug\" is intended for messages that shouldn't be shown\n  // to the developer\n  _defineConsoleLogMethod('debug', 'info');\n\n  // https://console.spec.whatwg.org/#log\n  _defineConsoleLogMethod('log', 'info');\n\n  // https://console.spec.whatwg.org/#info\n  _defineConsoleLogMethod('info', 'info');\n\n  // https://console.spec.whatwg.org/#warn\n  _defineConsoleLogMethod('warn', 'warn');\n\n  // https://console.spec.whatwg.org/#error\n  _defineConsoleLogMethod('error', 'error');\n\n  // https://console.spec.whatwg.org/#assert\n  enhancedConsole.assert = function assert(condition: unknown, ...data: unknown[]): void {\n    if (originalConsole.assert) {\n      // @ts-ignore\n      originalConsole.assert(!!condition, ...data);\n    }\n\n    if (condition) {\n      return;\n    }\n\n    const assertionMessage = 'Assertion failed';\n    if (!data.length) {\n      data.push(assertionMessage);\n    } else {\n      if (typeof data[0] !== 'string') {\n        data.unshift(assertionMessage);\n      } else {\n        data[0] = `${assertionMessage}: ${data[0]}`;\n      }\n    }\n\n    _enqueueRemoteLog('error', {}, data);\n  };\n\n  // https://console.spec.whatwg.org/#group\n  enhancedConsole.group = function group(...data: unknown[]): void {\n    if (originalConsole.group) {\n      // @ts-ignore\n      originalConsole.group(...data);\n    }\n\n    _enqueueRemoteLog('info', {}, data);\n    groupDepth++;\n  };\n\n  // https://console.spec.whatwg.org/#groupcollapsed\n  enhancedConsole.groupCollapsed = function groupCollapsed(...data: unknown[]): void {\n    if (originalConsole.groupCollapsed) {\n      // @ts-ignore\n      originalConsole.groupCollapsed(...data);\n    }\n\n    _enqueueRemoteLog('info', { groupCollapsed: true }, data);\n    groupDepth++;\n  };\n\n  // https://console.spec.whatwg.org/#groupend\n  enhancedConsole.groupEnd = function groupEnd(): void {\n    if (originalConsole.groupEnd) {\n      originalConsole.groupEnd();\n    }\n\n    if (groupDepth > 0) {\n      groupDepth--;\n    }\n\n    _enqueueRemoteLog('info', { shouldHide: true }, []);\n  };\n\n  /**\n   * Defines a method in the `console.log()` family on the enhanced console\n   * instance\n   */\n  function _defineConsoleLogMethod(name: keyof typeof console, level: LogLevel): void {\n    enhancedConsole[name] = function __expoConsoleLog(...data: unknown[]): void {\n      const originalMethod = originalConsole[name];\n      if (typeof originalMethod === 'function') {\n        originalMethod.apply(originalConsole, data);\n      }\n\n      _enqueueRemoteLog(level, {}, data);\n    };\n  }\n\n  /**\n   * Schedules the given log entry to be sent remotely in a safe way that handles all errors. This\n   * function is responsible for error handling because the console methods are synchronous but\n   * sending log messages is asynchronous, so this code (instead of the console methods) needs to be\n   * responsible for asynchronous errors.\n   */\n  function _enqueueRemoteLog(\n    level: LogLevel,\n    additionalFields: LogEntryFields,\n    data: unknown[]\n  ): void {\n    RemoteLogging.enqueueRemoteLogAsync(level, { groupDepth, ...additionalFields }, data).catch(\n      (error) => {\n        originalConsole.error(\n          `There was a problem sending log messages to your development environment`,\n          error\n        );\n      }\n    );\n  }\n\n  return enhancedConsole;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}