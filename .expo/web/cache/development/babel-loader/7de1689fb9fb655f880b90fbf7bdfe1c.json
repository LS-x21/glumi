{"ast":null,"code":"import Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { bloodSugarGraph } from \"../style/style\";\nimport Svg, { Path } from 'react-native-svg';\nimport { parseISO } from 'date-fns';\nimport * as d3 from 'd3';\nimport { Data } from \"./Data.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default (function () {\n  var sugarData = [95, 99, 112];\n  var yHideRatio = 0.8;\n  var defaultMax = 250;\n  var vw = Dimensions.get(\"window\").width;\n  var width = vw * .65;\n  var height = width;\n  var margin = {\n    top: vw * .1,\n    bottom: vw * .1,\n    left: vw * .06,\n    right: vw * .1\n  };\n\n  var makeLine = function makeLine(d) {\n    var xAxis = d3.scaleLinear().domain([new Date(d[0][0]), new Date(d[d.length - 1][0])]).range([margin.left, width - margin.right]);\n    var yAxis = d3.scaleLinear().domain(d3.extent(d.map(function (i) {\n      return i[1];\n    }))).range([height - margin.bottom, margin.top]);\n    var line = d3.line().x(function (i) {\n      return xAxis(i[0]);\n    }).y(function (i) {\n      return yAxis(i[1]);\n    });\n    var graph = line(Data);\n    var html = [];\n    yAxis.ticks().reverse().forEach(function (i) {\n      html.push(_jsx(Text, {\n        style: bloodSugarGraph.yLabel,\n        children: i\n      }, i));\n    });\n    return line(Data);\n  };\n\n  console.log(Data);\n  return _jsxs(View, {\n    style: bloodSugarGraph.container,\n    children: [_jsxs(View, {\n      style: bloodSugarGraph.content,\n      children: [_jsx(View, {\n        style: bloodSugarGraph.unitContainer,\n        children: _jsx(Text, {\n          style: [bloodSugarGraph.unit, {\n            transform: [{\n              rotate: '270deg'\n            }]\n          }],\n          children: \"ppm\"\n        })\n      }), _jsx(View, {\n        style: bloodSugarGraph.labelContainer\n      }), _jsx(Svg, {\n        width: width,\n        height: height,\n        xmlns: \"http://www.w3.org/2000/svg\",\n        children: _jsx(Path, {\n          fill: \"none\",\n          stroke: \"#ff9933\",\n          strokeWidth: vw * .015,\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          d: makeLine(Data)\n        })\n      })]\n    }), _jsx(View, {\n      style: bloodSugarGraph.xLabelContainer,\n      children: _jsx(Text, {\n        style: bloodSugarGraph.xLabel,\n        children: \"Acetone Levels\"\n      })\n    })]\n  });\n});","map":{"version":3,"names":["bloodSugarGraph","Svg","Path","parseISO","d3","Data","sugarData","yHideRatio","defaultMax","vw","Dimensions","get","width","height","margin","top","bottom","left","right","makeLine","d","xAxis","scaleLinear","domain","Date","length","range","yAxis","extent","map","i","line","x","y","graph","html","ticks","reverse","forEach","push","yLabel","console","log","container","content","unitContainer","unit","transform","rotate","labelContainer","xLabelContainer","xLabel"],"sources":["C:/Users/thund/OneDrive/Documents/HTML/breathanaylzer/components/BloodSugarGraph.js"],"sourcesContent":["import { Dimensions, View, Text } from 'react-native';\r\nimport { bloodSugarGraph } from '../style/style';\r\nimport Svg, { Path } from 'react-native-svg';\r\nimport { parseISO } from 'date-fns'\r\nimport * as d3 from 'd3';\r\nimport { Data } from './Data.js';\r\n\r\nexport default () => {\r\n  const sugarData = [95, 99, 112];\r\n  let yHideRatio = 0.8;\r\n  let defaultMax = 250;\r\n\r\n  const vw = Dimensions.get(\"window\").width;\r\n\r\n  const width = vw * .65;\r\n  const height = width;\r\n  const margin = {\r\n    top: vw * .1,\r\n    bottom: vw * .1,\r\n    left: vw * .06,\r\n    right: vw * .1,\r\n  }\r\n\r\n  const makeLine = (d) => {\r\n    const xAxis = d3.scaleLinear()\r\n      .domain([new Date(d[0][0]), new Date(d[d.length - 1][0])])\r\n      .range([margin.left, width - margin.right]);\r\n\r\n    const yAxis = d3.scaleLinear()\r\n      .domain(d3.extent(d.map((i) => i[1])))\r\n      .range([height - margin.bottom, margin.top]);\r\n\r\n    const line = d3.line()\r\n      .x(i => xAxis(i[0]))\r\n      .y(i => yAxis(i[1]))\r\n    let graph = line(Data);\r\n    let html = [];\r\n\r\n    yAxis.ticks().reverse().forEach((i) => {\r\n      html.push(<Text key={i} style={bloodSugarGraph.yLabel}>{i}</Text>)\r\n    });\r\n    return line(Data);\r\n  }\r\n\r\n  console.log(Data);\r\n\r\n  return (\r\n    <View style={bloodSugarGraph.container}>\r\n      <View style={bloodSugarGraph.content}>\r\n        <View style={bloodSugarGraph.unitContainer}>\r\n          <Text style={[bloodSugarGraph.unit,\r\n          {\r\n            transform: [{ rotate: '270deg' }]\r\n          }]}>\r\n            ppm</Text>\r\n        </View>\r\n        <View style={bloodSugarGraph.labelContainer}>\r\n          {/* {makeLine(Data)[1]} */}\r\n        </View>\r\n        <Svg\r\n          width={width}\r\n          height={height}\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n        >\r\n          <Path\r\n            fill=\"none\"\r\n            stroke=\"#ff9933\"\r\n            strokeWidth={vw * .015}\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            d={makeLine(Data)}\r\n          />\r\n        </Svg>\r\n      </View>\r\n      <View style={bloodSugarGraph.xLabelContainer}>\r\n        <Text style={bloodSugarGraph.xLabel}>Acetone Levels</Text>\r\n      </View>\r\n    </View>\r\n\r\n  );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}